"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.log = exports.logDebugInfo = exports.safeStringify = exports.setConsole = exports.logInfo = exports.logError = void 0;
const util = require("util");
const path_1 = require("path");
const fs_provider_1 = require("../fs-provider");
function getEnv() {
    if (typeof process !== undefined) {
        return process.env;
    }
    else {
        return {};
    }
}
// Log debugging to the ELS package root, if possible
// eslint-disable-next-line no-extra-boolean-cast
const debug = !!getEnv().CI ? true : getEnv().ELS_DEBUG || false;
const log_file = debug ? (0, fs_provider_1.fsProvider)().createWriteStream((0, path_1.resolve)(__dirname, `../../debug.${process.pid}.log`), { flags: 'w' }) : null;
let remoteConsole = null;
function logError(err) {
    if (remoteConsole) {
        remoteConsole.error(err.stack);
    }
    else {
        log(err, err.toString(), err.stack);
    }
}
exports.logError = logError;
function logInfo(str) {
    if (remoteConsole) {
        remoteConsole.info(str);
    }
    else {
        log(str);
    }
}
exports.logInfo = logInfo;
function setConsole(item) {
    remoteConsole = item;
}
exports.setConsole = setConsole;
function safeStringify(obj, indent = 2) {
    const cache = new WeakSet();
    const retVal = JSON.stringify(obj, (_, value) => typeof value === 'object' && value !== null
        ? cache.has(value)
            ? undefined // Duplicate reference found, discard key
            : cache.add(value) && value // Store value in our collection
        : value, indent);
    return retVal;
}
exports.safeStringify = safeStringify;
function logDebugInfo(...args) {
    if (!log_file) {
        return;
    }
    const output = args.map((a) => safeStringify(a)).join(' ');
    log_file.write('----------------------------------------' + '\r\n');
    log_file.write(util.format(output) + '\r\n');
    log_file.write('----------------------------------------' + '\r\n');
}
exports.logDebugInfo = logDebugInfo;
function log(...args) {
    const output = args.map((a) => safeStringify(a)).join(' ');
    if (remoteConsole) {
        remoteConsole.log(output);
    }
    if (!log_file) {
        return;
    }
    log_file.write('----------------------------------------' + '\r\n');
    log_file.write(util.format(output) + '\r\n');
    log_file.write('----------------------------------------' + '\r\n');
}
exports.log = log;
//# sourceMappingURL=logger.js.map