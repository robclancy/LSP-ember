"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const node_1 = require("vscode-languageserver/node");
const vscode_uri_1 = require("vscode-uri");
const estree_utils_1 = require("../../../estree-utils");
const base_1 = require("./base");
const logger_1 = require("../../../utils/logger");
function setCwd(cwd) {
    try {
        process.chdir(cwd);
    }
    catch (err) {
        (0, logger_1.logError)(err);
    }
}
class TemplateLintFixesCodeAction extends base_1.default {
    async fixTemplateLintIssues(issues, params, meta) {
        if (!this.server.templateLinter.isEnabled) {
            return [];
        }
        const linterKlass = await this.server.templateLinter.linterForProject(this.project);
        if (!linterKlass) {
            return [null];
        }
        const cwd = process.cwd();
        try {
            setCwd(this.project.root);
            const linter = new linterKlass();
            const fixes = issues.map(async (issue) => {
                const { output, isFixed } = await Promise.resolve(linter.verifyAndFix({
                    source: meta.selection || '',
                    moduleId: vscode_uri_1.URI.parse(params.textDocument.uri).fsPath,
                    filePath: vscode_uri_1.URI.parse(params.textDocument.uri).fsPath,
                }));
                if (!isFixed) {
                    return null;
                }
                const edit = {
                    changes: {
                        [params.textDocument.uri]: [node_1.TextEdit.replace((0, estree_utils_1.toLSRange)(meta.location), output)],
                    },
                };
                return node_1.CodeAction.create(`fix: ${issue.code}`, edit, node_1.CodeActionKind.QuickFix);
            });
            const resolvedFixes = await Promise.all(fixes);
            return resolvedFixes;
        }
        catch (e) {
            return [];
        }
        finally {
            setCwd(cwd);
        }
    }
    async onCodeAction(_, params) {
        const diagnostics = params.context.diagnostics;
        const fixableIssues = diagnostics.filter((el) => el.source === 'ember-template-lint' && el.message.endsWith('(fixable)'));
        if (fixableIssues.length === 0) {
            return null;
        }
        try {
            const meta = this.metaForRange(params);
            if (!meta) {
                return null;
            }
            const fixedIssues = await this.fixTemplateLintIssues(fixableIssues, params, meta);
            const codeActions = fixedIssues.filter((el) => el !== null);
            return codeActions;
        }
        catch (e) {
            return null;
        }
    }
}
exports.default = TemplateLintFixesCodeAction;
//# sourceMappingURL=template-lint-fixes.js.map