import { CompletionItem } from 'vscode-languageserver/node';
import { AddonMeta, CompletionFunctionParams } from './../../utils/addon-api';
import ASTPath from '../../glimmer-utils';
import Server from '../../server';
import { Project } from '../../project';
import { ASTv1 } from '@glimmer/syntax';
import { IRegistry } from '../../utils/registry-api';
/**
 * Generates a map of completion label (file name) to array of potential namespaced
 * paths.
 * @param addonsMeta addons meta array
 * @param server Server
 * @param focusPath currentfocus path
 * @returns { [key: string]: string[] }
 */
export declare function generateNamespacedComponentsHashMap(addonsMeta: Array<AddonMeta>, server: Server, isAngleComponent: boolean): {
    [key: string]: string[];
};
export default class TemplateCompletionProvider {
    get registry(): IRegistry;
    project: Project;
    server: Server;
    hasNamespaceSupport: boolean;
    meta: {
        projectAddonsInfoInitialized: boolean;
        helpersRegistryInitialized: boolean;
        modifiersRegistryInitialized: boolean;
        componentsRegistryInitialized: boolean;
        podComponentsRegistryInitialized: boolean;
        routesRegistryInitialized: boolean;
    };
    enableRegistryCache(value: keyof typeof TemplateCompletionProvider.prototype['meta']): void;
    initRegistry(_: Server, project: Project): Promise<void>;
    getAllAngleBracketComponents(root: string): Promise<(CompletionItem & {
        label: string;
    })[]>;
    templateContextLookup(rawCurrentFilePath: string, templateContent: string): Promise<CompletionItem[]>;
    getLocalPathExpressionCandidates(uri: string, originalText: string): Promise<CompletionItem[]>;
    getMustachePathCandidates(root: string): Promise<CompletionItem[]>;
    getBlockPathCandidates(root: string): Promise<CompletionItem[]>;
    getSubExpressionPathCandidates(): Promise<{
        label: string;
        data: {
            files: string[];
        };
        kind: 3;
        detail: string;
    }[]>;
    getExtendedScopedValues(focusPath: ASTPath): CompletionItem[];
    getScopedValues(focusPath: ASTPath, withMeta?: boolean): CompletionItem[];
    getAllModifiers(root: string): Promise<(CompletionItem | {
        label: string;
        data: {
            files: string[];
        };
        kind: 3;
        detail: string;
    })[]>;
    getParentComponentYields(node: ASTv1.ElementNode): Promise<{
        label: string;
        kind: 6;
        detail: string;
    }[]>;
    onComplete(root: string, params: CompletionFunctionParams): Promise<CompletionItem[]>;
}
