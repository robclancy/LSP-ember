"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.componentsContextData = void 0;
const vscode_languageserver_1 = require("vscode-languageserver");
const logger_1 = require("../../utils/logger");
const ember_meta_explorer_1 = require("ember-meta-explorer");
// @ts-expect-error esmodule
const uniqBy = require("lodash/uniqBy");
const layout_helpers_1 = require("../../utils/layout-helpers");
function localizeName(name) {
    if (name.startsWith('this.')) {
        return name;
    }
    else if (name.startsWith('@')) {
        return name;
    }
    else {
        return 'this.' + name;
    }
}
async function componentsContextData(fs, maybeScripts, templateContent) {
    const existingScripts = await (0, layout_helpers_1.asyncFilter)(maybeScripts, fs.exists);
    const hasAddonScript = existingScripts.find((el) => el.includes('addon'));
    const infoItems = [];
    if (existingScripts.length) {
        try {
            const filePath = hasAddonScript ? hasAddonScript : existingScripts.pop();
            const fileContent = await fs.readFile(filePath);
            if (fileContent !== null) {
                const jsMeta = (0, ember_meta_explorer_1.processJSFile)(fileContent, filePath);
                (0, logger_1.logDebugInfo)('jsMeta', jsMeta);
                infoItems.push(jsMeta);
            }
        }
        catch (e) {
            (0, logger_1.logError)(e);
        }
    }
    try {
        let templateInfo = null;
        templateInfo = (0, ember_meta_explorer_1.processTemplate)(templateContent);
        infoItems.push(templateInfo);
    }
    catch (e) {
        (0, logger_1.logError)(e);
    }
    (0, logger_1.logDebugInfo)('infoItems', infoItems);
    const meta = infoItems
        .filter((item) => item !== null)
        .reduce((result, it) => {
        Object.keys(it).forEach((name) => {
            if (name in result) {
                result[name] = result[name].concat(it[name]);
            }
            else {
                result[name] = it[name].slice(0);
            }
        });
        return result;
    }, {});
    const items = [];
    (0, logger_1.logDebugInfo)('meta', meta);
    let contextInfo = {};
    try {
        contextInfo = (0, ember_meta_explorer_1.extractComponentInformationFromMeta)(meta);
    }
    catch (e) {
        (0, logger_1.logError)(e);
    }
    (0, logger_1.logDebugInfo)('contextInfo', contextInfo);
    contextInfo.jsProps.forEach((propName) => {
        const [name] = propName.split(' ');
        items.push({
            kind: vscode_languageserver_1.CompletionItemKind.Property,
            label: localizeName(name),
            detail: propName,
        });
    });
    contextInfo.jsComputeds.forEach((propName) => {
        const [name] = propName.split(' ');
        items.push({
            kind: vscode_languageserver_1.CompletionItemKind.Property,
            label: localizeName(name),
            detail: 'ComputedProperty: ' + propName,
        });
    });
    contextInfo.jsFunc.forEach((propName) => {
        const [name] = propName.split(' ');
        items.push({
            kind: vscode_languageserver_1.CompletionItemKind.Function,
            label: localizeName(name),
            detail: 'Function: ' + propName,
        });
    });
    contextInfo.hbsProps.forEach((propName) => {
        const [name] = propName.split(' ');
        items.push({
            kind: vscode_languageserver_1.CompletionItemKind.Property,
            label: name,
            detail: 'Template Property: ' + propName,
        });
    });
    // contextInfo.api.actions.forEach((propName: string) => {
    //   const [name]: any = propName.split(' ');
    //   items.push({
    //     kind: CompletionItemKind.Event,
    //     label: name,
    //     detail: 'Component Action: ' + propName,
    //   });
    // });
    // @todo actions
    return uniqBy(items, 'label');
}
exports.componentsContextData = componentsContextData;
//# sourceMappingURL=template-context-provider.js.map