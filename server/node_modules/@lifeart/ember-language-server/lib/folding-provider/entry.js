"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const template_folding_provider_1 = require("./template-folding-provider");
const glimmer_script_1 = require("../utils/glimmer-script");
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const ember_extract_inline_templates_1 = require("@lifeart/ember-extract-inline-templates");
const ember_meta_explorer_1 = require("ember-meta-explorer");
class FoldingProvider {
    constructor(server) {
        this.server = server;
        this.isEnabled = true;
        this.templateFoldingProvider = new template_folding_provider_1.default();
    }
    enable() {
        this.isEnabled = true;
    }
    disable() {
        this.isEnabled = false;
    }
    onFoldingRanges(params) {
        if (!this.isEnabled) {
            return null;
        }
        const document = this.server.documents.get(params.textDocument.uri);
        if (!document) {
            return null;
        }
        if (document.uri.endsWith('.hbs')) {
            try {
                return this.templateFoldingProvider.handle(document);
            }
            catch (e) {
                return null;
            }
        }
        else if (document.uri.endsWith('.gts') || document.uri.endsWith('.gjs')) {
            try {
                const ranges = (0, glimmer_script_1.getFileRanges)(document.getText());
                const templatesData = new glimmer_script_1.RangeWalker(ranges).templates(true);
                const documents = templatesData.map((tpl) => vscode_languageserver_textdocument_1.TextDocument.create(document.uri, 'handlebars', document.version, tpl.absoluteContent));
                const results = [];
                documents.forEach((d) => {
                    this.templateFoldingProvider.handle(d).forEach((result) => {
                        results.push(result);
                    });
                });
                return results;
            }
            catch (e) {
                return null;
            }
        }
        else if (document.uri.endsWith('.js') || document.uri.endsWith('.ts')) {
            try {
                const text = (0, ember_extract_inline_templates_1.searchAndExtractHbs)(document.getText(), {
                    parse(source) {
                        return (0, ember_meta_explorer_1.parseScriptFile)(source);
                    },
                });
                return this.templateFoldingProvider.handle(vscode_languageserver_textdocument_1.TextDocument.create(document.uri, 'handlebars', document.version, text));
            }
            catch (e) {
                return null;
            }
        }
        return null;
    }
}
exports.default = FoldingProvider;
//# sourceMappingURL=entry.js.map