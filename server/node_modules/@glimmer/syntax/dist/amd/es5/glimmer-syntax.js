define('@glimmer/syntax', ['exports', '@glimmer/env', '@glimmer/util', '@handlebars/parser', 'simple-html-tokenizer'], function (exports, env, util, parser, simpleHtmlTokenizer) { 'use strict';

  var UNKNOWN_POSITION = Object.freeze({
    line: 1,
    column: 0
  });
  var SYNTHETIC_LOCATION = Object.freeze({
    source: '(synthetic)',
    start: UNKNOWN_POSITION,
    end: UNKNOWN_POSITION
  });
  var TEMPORARY_LOCATION = Object.freeze({
    source: '(temporary)',
    start: UNKNOWN_POSITION,
    end: UNKNOWN_POSITION
  });
  var NON_EXISTENT_LOCATION = Object.freeze({
    source: '(nonexistent)',
    start: UNKNOWN_POSITION,
    end: UNKNOWN_POSITION
  });
  var BROKEN_LOCATION = Object.freeze({
    source: '(broken)',
    start: UNKNOWN_POSITION,
    end: UNKNOWN_POSITION
  });

  var SourceSlice = /*#__PURE__*/function () {
    function SourceSlice(options) {
      this.loc = options.loc;
      this.chars = options.chars;
    }

    SourceSlice.synthetic = function synthetic(chars) {
      var offsets = SourceSpan.synthetic(chars);
      return new SourceSlice({
        loc: offsets,
        chars: chars
      });
    };

    SourceSlice.load = function load(source, slice) {
      return new SourceSlice({
        loc: SourceSpan.load(source, slice[1]),
        chars: slice[0]
      });
    };

    var _proto = SourceSlice.prototype;

    _proto.getString = function getString() {
      return this.chars;
    };

    _proto.serialize = function serialize() {
      return [this.chars, this.loc.serialize()];
    };

    return SourceSlice;
  }();

  function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  /**
   * This file implements the DSL used by span and offset in places where they need to exhaustively
   * consider all combinations of states (Handlebars offsets, character offsets and invisible/broken
   * offsets).
   *
   * It's probably overkill, but it makes the code that uses it clear. It could be refactored or
   * removed.
   */

  var MatchAny = 'MATCH_ANY';
  var IsInvisible = 'IS_INVISIBLE';

  var WhenList = /*#__PURE__*/function () {
    function WhenList(whens) {
      this._whens = whens;
    }

    var _proto = WhenList.prototype;

    _proto.first = function first(kind) {
      for (var _iterator = _createForOfIteratorHelperLoose(this._whens), _step; !(_step = _iterator()).done;) {
        var when = _step.value;
        var value = when.match(kind);

        if (util.isPresent(value)) {
          return value[0];
        }
      }

      return null;
    };

    return WhenList;
  }();

  var When = /*#__PURE__*/function () {
    function When() {
      this._map = new Map();
    }

    var _proto2 = When.prototype;

    _proto2.get = function get(pattern, or) {
      var value = this._map.get(pattern);

      if (value) {
        return value;
      }

      value = or();

      this._map.set(pattern, value);

      return value;
    };

    _proto2.add = function add(pattern, out) {
      this._map.set(pattern, out);
    };

    _proto2.match = function match(kind) {
      var pattern = patternFor(kind);
      var out = [];

      var exact = this._map.get(pattern);

      var fallback = this._map.get(MatchAny);

      if (exact) {
        out.push(exact);
      }

      if (fallback) {
        out.push(fallback);
      }

      return out;
    };

    return When;
  }();

  function match(callback) {
    return callback(new Matcher()).check();
  }

  var Matcher = /*#__PURE__*/function () {
    function Matcher() {
      this._whens = new When();
    }
    /**
     * You didn't exhaustively match all possibilities.
     */


    var _proto3 = Matcher.prototype;

    _proto3.check = function check() {
      var _this = this;

      return function (left, right) {
        return _this.matchFor(left.kind, right.kind)(left, right);
      };
    };

    _proto3.matchFor = function matchFor(left, right) {
      var nesteds = this._whens.match(left);
      var callback = new WhenList(nesteds).first(right);
      return callback;
    };

    _proto3.when = function when(left, right, // eslint-disable-next-line @typescript-eslint/no-explicit-any
    callback) {
      this._whens.get(left, function () {
        return new When();
      }).add(right, callback);

      return this;
    };

    return Matcher;
  }();

  function patternFor(kind) {
    switch (kind) {
      case "Broken"
      /* Broken */
      :
      case "InternalsSynthetic"
      /* InternalsSynthetic */
      :
      case "NonExistent"
      /* NonExistent */
      :
        return IsInvisible;

      default:
        return kind;
    }
  }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
  /**
   * Used to indicate that an attempt to convert a `SourcePosition` to a character offset failed. It
   * is separate from `null` so that `null` can be used to indicate that the computation wasn't yet
   * attempted (and therefore to cache the failure)
   */

  var BROKEN = 'BROKEN';
  /**
   * A `SourceOffset` represents a single position in the source.
   *
   * There are three kinds of backing data for `SourceOffset` objects:
   *
   * - `CharPosition`, which contains a character offset into the raw source string
   * - `HbsPosition`, which contains a `SourcePosition` from the Handlebars AST, which can be
   *   converted to a `CharPosition` on demand.
   * - `InvisiblePosition`, which represents a position not in source (@see {InvisiblePosition})
   */

  var SourceOffset = /*#__PURE__*/function () {
    function SourceOffset(data) {
      this.data = data;
    }
    /**
     * Create a `SourceOffset` from a Handlebars `SourcePosition`. It's stored as-is, and converted
     * into a character offset on demand, which avoids unnecessarily computing the offset of every
     * `SourceLocation`, but also means that broken `SourcePosition`s are not always detected.
     */


    SourceOffset.forHbsPos = function forHbsPos(source, pos) {
      return new HbsPosition(source, pos, null).wrap();
    }
    /**
     * Create a `SourceOffset` that corresponds to a broken `SourcePosition`. This means that the
     * calling code determined (or knows) that the `SourceLocation` doesn't correspond correctly to
     * any part of the source.
     */
    ;

    SourceOffset.broken = function broken(pos) {
      if (pos === void 0) {
        pos = UNKNOWN_POSITION;
      }

      return new InvisiblePosition("Broken"
      /* Broken */
      , pos).wrap();
    }
    /**
     * Get the character offset for this `SourceOffset`, if possible.
     */
    ;

    var _proto = SourceOffset.prototype;

    /**
     * Compare this offset with another one.
     *
     * If both offsets are `HbsPosition`s, they're equivalent as long as their lines and columns are
     * the same. This avoids computing offsets unnecessarily.
     *
     * Otherwise, two `SourceOffset`s are equivalent if their successfully computed character offsets
     * are the same.
     */
    _proto.eql = function eql(right) {
      return _eql(this.data, right.data);
    }
    /**
     * Create a span that starts from this source offset and ends with another source offset. Avoid
     * computing character offsets if both `SourceOffset`s are still lazy.
     */
    ;

    _proto.until = function until(other) {
      return span(this.data, other.data);
    }
    /**
     * Create a `SourceOffset` by moving the character position represented by this source offset
     * forward or backward (if `by` is negative), if possible.
     *
     * If this `SourceOffset` can't compute a valid character offset, `move` returns a broken offset.
     *
     * If the resulting character offset is less than 0 or greater than the size of the source, `move`
     * returns a broken offset.
     */
    ;

    _proto.move = function move(by) {
      var charPos = this.data.toCharPos();

      if (charPos === null) {
        return SourceOffset.broken();
      } else {
        var result = charPos.offset + by;

        if (charPos.source.check(result)) {
          return new CharPosition(charPos.source, result).wrap();
        } else {
          return SourceOffset.broken();
        }
      }
    }
    /**
     * Create a new `SourceSpan` that represents a collapsed range at this source offset. Avoid
     * computing the character offset if it has not already been computed.
     */
    ;

    _proto.collapsed = function collapsed() {
      return span(this.data, this.data);
    }
    /**
     * Convert this `SourceOffset` into a Handlebars {@see SourcePosition} for compatibility with
     * existing plugins.
     */
    ;

    _proto.toJSON = function toJSON() {
      return this.data.toJSON();
    };

    _createClass(SourceOffset, [{
      key: "offset",
      get: function get() {
        var charPos = this.data.toCharPos();
        return charPos === null ? null : charPos.offset;
      }
    }]);

    return SourceOffset;
  }();
  var CharPosition = /*#__PURE__*/function () {
    function CharPosition(source, charPos) {
      this.source = source;
      this.charPos = charPos;
      this.kind = "CharPosition"
      /* CharPosition */
      ;
      /** Computed from char offset */

      this._locPos = null;
    }
    /**
     * This is already a `CharPosition`.
     *
     * {@see HbsPosition} for the alternative.
     *
     * @implements {PositionData}
     */


    var _proto2 = CharPosition.prototype;

    _proto2.toCharPos = function toCharPos() {
      return this;
    }
    /**
     * Produce a Handlebars {@see SourcePosition} for this `CharPosition`. If this `CharPosition` was
     * computed using {@see SourceOffset#move}, this will compute the `SourcePosition` for the offset.
     *
     * @implements {PositionData}
     */
    ;

    _proto2.toJSON = function toJSON() {
      var hbs = this.toHbsPos();
      return hbs === null ? UNKNOWN_POSITION : hbs.toJSON();
    };

    _proto2.wrap = function wrap() {
      return new SourceOffset(this);
    }
    /**
     * A `CharPosition` always has an offset it can produce without any additional computation.
     */
    ;

    /**
     * Convert the current character offset to an `HbsPosition`, if it was not already computed. Once
     * a `CharPosition` has computed its `HbsPosition`, it will not need to do compute it again, and
     * the same `CharPosition` is retained when used as one of the ends of a `SourceSpan`, so
     * computing the `HbsPosition` should be a one-time operation.
     */
    _proto2.toHbsPos = function toHbsPos() {
      var locPos = this._locPos;

      if (locPos === null) {
        var hbsPos = this.source.hbsPosFor(this.charPos);

        if (hbsPos === null) {
          this._locPos = locPos = BROKEN;
        } else {
          this._locPos = locPos = new HbsPosition(this.source, hbsPos, this.charPos);
        }
      }

      return locPos === BROKEN ? null : locPos;
    };

    _createClass(CharPosition, [{
      key: "offset",
      get: function get() {
        return this.charPos;
      }
    }]);

    return CharPosition;
  }();
  var HbsPosition = /*#__PURE__*/function () {
    function HbsPosition(source, hbsPos, charPos) {
      if (charPos === void 0) {
        charPos = null;
      }

      this.source = source;
      this.hbsPos = hbsPos;
      this.kind = "HbsPosition"
      /* HbsPosition */
      ;
      this._charPos = charPos === null ? null : new CharPosition(source, charPos);
    }
    /**
     * Lazily compute the character offset from the {@see SourcePosition}. Once an `HbsPosition` has
     * computed its `CharPosition`, it will not need to do compute it again, and the same
     * `HbsPosition` is retained when used as one of the ends of a `SourceSpan`, so computing the
     * `CharPosition` should be a one-time operation.
     *
     * @implements {PositionData}
     */


    var _proto3 = HbsPosition.prototype;

    _proto3.toCharPos = function toCharPos() {
      var charPos = this._charPos;

      if (charPos === null) {
        var charPosNumber = this.source.charPosFor(this.hbsPos);

        if (charPosNumber === null) {
          this._charPos = charPos = BROKEN;
        } else {
          this._charPos = charPos = new CharPosition(this.source, charPosNumber);
        }
      }

      return charPos === BROKEN ? null : charPos;
    }
    /**
     * Return the {@see SourcePosition} that this `HbsPosition` was instantiated with. This operation
     * does not need to compute anything.
     *
     * @implements {PositionData}
     */
    ;

    _proto3.toJSON = function toJSON() {
      return this.hbsPos;
    };

    _proto3.wrap = function wrap() {
      return new SourceOffset(this);
    }
    /**
     * This is already an `HbsPosition`.
     *
     * {@see CharPosition} for the alternative.
     */
    ;

    _proto3.toHbsPos = function toHbsPos() {
      return this;
    };

    return HbsPosition;
  }();
  var InvisiblePosition = /*#__PURE__*/function () {
    function InvisiblePosition(kind, // whatever was provided, possibly broken
    pos) {
      this.kind = kind;
      this.pos = pos;
    }
    /**
     * A broken position cannot be turned into a {@see CharacterPosition}.
     */


    var _proto4 = InvisiblePosition.prototype;

    _proto4.toCharPos = function toCharPos() {
      return null;
    }
    /**
     * The serialization of an `InvisiblePosition is whatever Handlebars {@see SourcePosition} was
     * originally identified as broken, non-existent or synthetic.
     *
     * If an `InvisiblePosition` never had an source offset at all, this method returns
     * {@see UNKNOWN_POSITION} for compatibility.
     */
    ;

    _proto4.toJSON = function toJSON() {
      return this.pos;
    };

    _proto4.wrap = function wrap() {
      return new SourceOffset(this);
    };

    _createClass(InvisiblePosition, [{
      key: "offset",
      get: function get() {
        return null;
      }
    }]);

    return InvisiblePosition;
  }();
  /**
   * Compare two {@see AnyPosition} and determine whether they are equal.
   *
   * @see {SourceOffset#eql}
   */

  var _eql = match(function (m) {
    return m.when("HbsPosition"
    /* HbsPosition */
    , "HbsPosition"
    /* HbsPosition */
    , function (_ref, _ref2) {
      var left = _ref.hbsPos;
      var right = _ref2.hbsPos;
      return left.column === right.column && left.line === right.line;
    }).when("CharPosition"
    /* CharPosition */
    , "CharPosition"
    /* CharPosition */
    , function (_ref3, _ref4) {
      var left = _ref3.charPos;
      var right = _ref4.charPos;
      return left === right;
    }).when("CharPosition"
    /* CharPosition */
    , "HbsPosition"
    /* HbsPosition */
    , function (_ref5, right) {
      var left = _ref5.offset;

      var _a;

      return left === ((_a = right.toCharPos()) === null || _a === void 0 ? void 0 : _a.offset);
    }).when("HbsPosition"
    /* HbsPosition */
    , "CharPosition"
    /* CharPosition */
    , function (left, _ref6) {
      var right = _ref6.offset;

      var _a;

      return ((_a = left.toCharPos()) === null || _a === void 0 ? void 0 : _a.offset) === right;
    }).when(MatchAny, MatchAny, function () {
      return false;
    });
  });

  function _defineProperties$1(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$1(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$1(Constructor.prototype, protoProps); if (staticProps) _defineProperties$1(Constructor, staticProps); return Constructor; }
  /**
   * A `SourceSpan` object represents a span of characters inside of a template source.
   *
   * There are three kinds of `SourceSpan` objects:
   *
   * - `ConcreteSourceSpan`, which contains byte offsets
   * - `LazySourceSpan`, which contains `SourceLocation`s from the Handlebars AST, which can be
   *   converted to byte offsets on demand.
   * - `InvisibleSourceSpan`, which represent source strings that aren't present in the source,
   *   because:
   *     - they were created synthetically
   *     - their location is nonsensical (the span is broken)
   *     - they represent nothing in the source (this currently happens only when a bug in the
   *       upstream Handlebars parser fails to assign a location to empty blocks)
   *
   * At a high level, all `SourceSpan` objects provide:
   *
   * - byte offsets
   * - source in column and line format
   *
   * And you can do these operations on `SourceSpan`s:
   *
   * - collapse it to a `SourceSpan` representing its starting or ending position
   * - slice out some characters, optionally skipping some characters at the beginning or end
   * - create a new `SourceSpan` with a different starting or ending offset
   *
   * All SourceSpan objects implement `SourceLocation`, for compatibility. All SourceSpan
   * objects have a `toJSON` that emits `SourceLocation`, also for compatibility.
   *
   * For compatibility, subclasses of `AbstractSourceSpan` must implement `locDidUpdate`, which
   * happens when an AST plugin attempts to modify the `start` or `end` of a span directly.
   *
   * The goal is to avoid creating any problems for use-cases like AST Explorer.
   */

  var SourceSpan = /*#__PURE__*/function () {
    function SourceSpan(data) {
      this.data = data;
      this.isInvisible = data.kind !== "CharPosition"
      /* CharPosition */
      && data.kind !== "HbsPosition"
      /* HbsPosition */
      ;
    }

    SourceSpan.load = function load(source, serialized) {
      if (typeof serialized === 'number') {
        return SourceSpan.forCharPositions(source, serialized, serialized);
      } else if (typeof serialized === 'string') {
        return SourceSpan.synthetic(serialized);
      } else if (Array.isArray(serialized)) {
        return SourceSpan.forCharPositions(source, serialized[0], serialized[1]);
      } else if (serialized === "NonExistent"
      /* NonExistent */
      ) {
          return SourceSpan.NON_EXISTENT;
        } else if (serialized === "Broken"
      /* Broken */
      ) {
          return SourceSpan.broken(BROKEN_LOCATION);
        }

      util.assertNever(serialized);
    };

    SourceSpan.forHbsLoc = function forHbsLoc(source, loc) {
      var start = new HbsPosition(source, loc.start);
      var end = new HbsPosition(source, loc.end);
      return new HbsSpan(source, {
        start: start,
        end: end
      }, loc).wrap();
    };

    SourceSpan.forCharPositions = function forCharPositions(source, startPos, endPos) {
      var start = new CharPosition(source, startPos);
      var end = new CharPosition(source, endPos);
      return new CharPositionSpan(source, {
        start: start,
        end: end
      }).wrap();
    };

    SourceSpan.synthetic = function synthetic(chars) {
      return new InvisibleSpan("InternalsSynthetic"
      /* InternalsSynthetic */
      , NON_EXISTENT_LOCATION, chars).wrap();
    };

    SourceSpan.broken = function broken(pos) {
      if (pos === void 0) {
        pos = BROKEN_LOCATION;
      }

      return new InvisibleSpan("Broken"
      /* Broken */
      , pos).wrap();
    };

    var _proto = SourceSpan.prototype;

    _proto.getStart = function getStart() {
      return this.data.getStart().wrap();
    };

    _proto.getEnd = function getEnd() {
      return this.data.getEnd().wrap();
    };

    /**
     * Support converting ASTv1 nodes into a serialized format using JSON.stringify.
     */
    _proto.toJSON = function toJSON() {
      return this.loc;
    }
    /**
     * Create a new span with the current span's end and a new beginning.
     */
    ;

    _proto.withStart = function withStart(other) {
      return span(other.data, this.data.getEnd());
    }
    /**
     * Create a new span with the current span's beginning and a new ending.
     */
    ;

    _proto.withEnd = function withEnd(other) {
      return span(this.data.getStart(), other.data);
    };

    _proto.asString = function asString() {
      return this.data.asString();
    }
    /**
     * Convert this `SourceSpan` into a `SourceSlice`. In debug mode, this method optionally checks
     * that the byte offsets represented by this `SourceSpan` actually correspond to the expected
     * string.
     */
    ;

    _proto.toSlice = function toSlice(expected) {
      var chars = this.data.asString();

      if (env.DEBUG) {
        if (expected !== undefined && chars !== expected) {
          // eslint-disable-next-line no-console
          console.warn("unexpectedly found " + JSON.stringify(chars) + " when slicing source, but expected " + JSON.stringify(expected));
        }
      }

      return new SourceSlice({
        loc: this,
        chars: expected || chars
      });
    }
    /**
     * For compatibility with SourceLocation in AST plugins
     *
     * @deprecated use startPosition instead
     */
    ;

    _proto.collapse = function collapse(where) {
      switch (where) {
        case 'start':
          return this.getStart().collapsed();

        case 'end':
          return this.getEnd().collapsed();
      }
    };

    _proto.extend = function extend(other) {
      return span(this.data.getStart(), other.data.getEnd());
    };

    _proto.serialize = function serialize() {
      return this.data.serialize();
    };

    _proto.slice = function slice(_ref) {
      var _ref$skipStart = _ref.skipStart,
          skipStart = _ref$skipStart === void 0 ? 0 : _ref$skipStart,
          _ref$skipEnd = _ref.skipEnd,
          skipEnd = _ref$skipEnd === void 0 ? 0 : _ref$skipEnd;
      return span(this.getStart().move(skipStart).data, this.getEnd().move(-skipEnd).data);
    };

    _proto.sliceStartChars = function sliceStartChars(_ref2) {
      var _ref2$skipStart = _ref2.skipStart,
          skipStart = _ref2$skipStart === void 0 ? 0 : _ref2$skipStart,
          chars = _ref2.chars;
      return span(this.getStart().move(skipStart).data, this.getStart().move(skipStart + chars).data);
    };

    _proto.sliceEndChars = function sliceEndChars(_ref3) {
      var _ref3$skipEnd = _ref3.skipEnd,
          skipEnd = _ref3$skipEnd === void 0 ? 0 : _ref3$skipEnd,
          chars = _ref3.chars;
      return span(this.getEnd().move(skipEnd - chars).data, this.getStart().move(-skipEnd).data);
    };

    _createClass$1(SourceSpan, [{
      key: "loc",
      get: function get() {
        var span = this.data.toHbsSpan();
        return span === null ? BROKEN_LOCATION : span.toHbsLoc();
      }
    }, {
      key: "module",
      get: function get() {
        return this.data.getModule();
      }
      /**
       * Get the starting `SourcePosition` for this `SourceSpan`, lazily computing it if needed.
       */

    }, {
      key: "startPosition",
      get: function get() {
        return this.loc.start;
      }
      /**
       * Get the ending `SourcePosition` for this `SourceSpan`, lazily computing it if needed.
       */

    }, {
      key: "endPosition",
      get: function get() {
        return this.loc.end;
      }
    }, {
      key: "start",
      get: function get() {
        return this.loc.start;
      }
      /**
       * For compatibility with SourceLocation in AST plugins
       *
       * @deprecated use withStart instead
       */
      ,
      set: function set(position) {
        this.data.locDidUpdate({
          start: position
        });
      }
      /**
       * For compatibility with SourceLocation in AST plugins
       *
       * @deprecated use endPosition instead
       */

    }, {
      key: "end",
      get: function get() {
        return this.loc.end;
      }
      /**
       * For compatibility with SourceLocation in AST plugins
       *
       * @deprecated use withEnd instead
       */
      ,
      set: function set(position) {
        this.data.locDidUpdate({
          end: position
        });
      }
      /**
       * For compatibility with SourceLocation in AST plugins
       *
       * @deprecated use module instead
       */

    }, {
      key: "source",
      get: function get() {
        return this.module;
      }
    }], [{
      key: "NON_EXISTENT",
      get: function get() {
        return new InvisibleSpan("NonExistent"
        /* NonExistent */
        , NON_EXISTENT_LOCATION).wrap();
      }
    }]);

    return SourceSpan;
  }();

  var CharPositionSpan = /*#__PURE__*/function () {
    function CharPositionSpan(source, charPositions) {
      this.source = source;
      this.charPositions = charPositions;
      this.kind = "CharPosition"
      /* CharPosition */
      ;
      this._locPosSpan = null;
    }

    var _proto2 = CharPositionSpan.prototype;

    _proto2.wrap = function wrap() {
      return new SourceSpan(this);
    };

    _proto2.asString = function asString() {
      return this.source.slice(this.charPositions.start.charPos, this.charPositions.end.charPos);
    };

    _proto2.getModule = function getModule() {
      return this.source.module;
    };

    _proto2.getStart = function getStart() {
      return this.charPositions.start;
    };

    _proto2.getEnd = function getEnd() {
      return this.charPositions.end;
    };

    _proto2.locDidUpdate = function locDidUpdate() {
    };

    _proto2.toHbsSpan = function toHbsSpan() {
      var locPosSpan = this._locPosSpan;

      if (locPosSpan === null) {
        var start = this.charPositions.start.toHbsPos();
        var end = this.charPositions.end.toHbsPos();

        if (start === null || end === null) {
          locPosSpan = this._locPosSpan = BROKEN;
        } else {
          locPosSpan = this._locPosSpan = new HbsSpan(this.source, {
            start: start,
            end: end
          });
        }
      }

      return locPosSpan === BROKEN ? null : locPosSpan;
    };

    _proto2.serialize = function serialize() {
      var _this$charPositions = this.charPositions,
          start = _this$charPositions.start.charPos,
          end = _this$charPositions.end.charPos;

      if (start === end) {
        return start;
      } else {
        return [start, end];
      }
    };

    _proto2.toCharPosSpan = function toCharPosSpan() {
      return this;
    };

    return CharPositionSpan;
  }();

  var HbsSpan = /*#__PURE__*/function () {
    function HbsSpan(source, hbsPositions, providedHbsLoc) {
      if (providedHbsLoc === void 0) {
        providedHbsLoc = null;
      }

      this.source = source;
      this.hbsPositions = hbsPositions;
      this.kind = "HbsPosition"
      /* HbsPosition */
      ;
      this._charPosSpan = null;
      this._providedHbsLoc = providedHbsLoc;
    }

    var _proto3 = HbsSpan.prototype;

    _proto3.serialize = function serialize() {
      var charPos = this.toCharPosSpan();
      return charPos === null ? "Broken"
      /* Broken */
      : charPos.wrap().serialize();
    };

    _proto3.wrap = function wrap() {
      return new SourceSpan(this);
    };

    _proto3.updateProvided = function updateProvided(pos, edge) {
      if (this._providedHbsLoc) {
        this._providedHbsLoc[edge] = pos;
      } // invalidate computed character offsets


      this._charPosSpan = null;
      this._providedHbsLoc = {
        start: pos,
        end: pos
      };
    };

    _proto3.locDidUpdate = function locDidUpdate(_ref4) {
      var start = _ref4.start,
          end = _ref4.end;

      if (start !== undefined) {
        this.updateProvided(start, 'start');
        this.hbsPositions.start = new HbsPosition(this.source, start, null);
      }

      if (end !== undefined) {
        this.updateProvided(end, 'end');
        this.hbsPositions.end = new HbsPosition(this.source, end, null);
      }
    };

    _proto3.asString = function asString() {
      var span = this.toCharPosSpan();
      return span === null ? '' : span.asString();
    };

    _proto3.getModule = function getModule() {
      return this.source.module;
    };

    _proto3.getStart = function getStart() {
      return this.hbsPositions.start;
    };

    _proto3.getEnd = function getEnd() {
      return this.hbsPositions.end;
    };

    _proto3.toHbsLoc = function toHbsLoc() {
      return {
        start: this.hbsPositions.start.hbsPos,
        end: this.hbsPositions.end.hbsPos
      };
    };

    _proto3.toHbsSpan = function toHbsSpan() {
      return this;
    };

    _proto3.toCharPosSpan = function toCharPosSpan() {
      var charPosSpan = this._charPosSpan;

      if (charPosSpan === null) {
        var start = this.hbsPositions.start.toCharPos();
        var end = this.hbsPositions.end.toCharPos();

        if (start && end) {
          charPosSpan = this._charPosSpan = new CharPositionSpan(this.source, {
            start: start,
            end: end
          });
        } else {
          charPosSpan = this._charPosSpan = BROKEN;
          return null;
        }
      }

      return charPosSpan === BROKEN ? null : charPosSpan;
    };

    return HbsSpan;
  }();

  var InvisibleSpan = /*#__PURE__*/function () {
    function InvisibleSpan(kind, // whatever was provided, possibly broken
    loc, // if the span represents a synthetic string
    string) {
      if (string === void 0) {
        string = null;
      }

      this.kind = kind;
      this.loc = loc;
      this.string = string;
    }

    var _proto4 = InvisibleSpan.prototype;

    _proto4.serialize = function serialize() {
      switch (this.kind) {
        case "Broken"
        /* Broken */
        :
        case "NonExistent"
        /* NonExistent */
        :
          return this.kind;

        case "InternalsSynthetic"
        /* InternalsSynthetic */
        :
          return this.string || '';
      }
    };

    _proto4.wrap = function wrap() {
      return new SourceSpan(this);
    };

    _proto4.asString = function asString() {
      return this.string || '';
    };

    _proto4.locDidUpdate = function locDidUpdate(_ref5) {
      var start = _ref5.start,
          end = _ref5.end;

      if (start !== undefined) {
        this.loc.start = start;
      }

      if (end !== undefined) {
        this.loc.end = end;
      }
    };

    _proto4.getModule = function getModule() {
      // TODO: Make this reflect the actual module this span originated from
      return 'an unknown module';
    };

    _proto4.getStart = function getStart() {
      return new InvisiblePosition(this.kind, this.loc.start);
    };

    _proto4.getEnd = function getEnd() {
      return new InvisiblePosition(this.kind, this.loc.end);
    };

    _proto4.toCharPosSpan = function toCharPosSpan() {
      return this;
    };

    _proto4.toHbsSpan = function toHbsSpan() {
      return null;
    };

    _proto4.toHbsLoc = function toHbsLoc() {
      return BROKEN_LOCATION;
    };

    return InvisibleSpan;
  }();

  var span = match(function (m) {
    return m.when("HbsPosition"
    /* HbsPosition */
    , "HbsPosition"
    /* HbsPosition */
    , function (left, right) {
      return new HbsSpan(left.source, {
        start: left,
        end: right
      }).wrap();
    }).when("CharPosition"
    /* CharPosition */
    , "CharPosition"
    /* CharPosition */
    , function (left, right) {
      return new CharPositionSpan(left.source, {
        start: left,
        end: right
      }).wrap();
    }).when("CharPosition"
    /* CharPosition */
    , "HbsPosition"
    /* HbsPosition */
    , function (left, right) {
      var rightCharPos = right.toCharPos();

      if (rightCharPos === null) {
        return new InvisibleSpan("Broken"
        /* Broken */
        , BROKEN_LOCATION).wrap();
      } else {
        return span(left, rightCharPos);
      }
    }).when("HbsPosition"
    /* HbsPosition */
    , "CharPosition"
    /* CharPosition */
    , function (left, right) {
      var leftCharPos = left.toCharPos();

      if (leftCharPos === null) {
        return new InvisibleSpan("Broken"
        /* Broken */
        , BROKEN_LOCATION).wrap();
      } else {
        return span(leftCharPos, right);
      }
    }).when(IsInvisible, MatchAny, function (left) {
      return new InvisibleSpan(left.kind, BROKEN_LOCATION).wrap();
    }).when(MatchAny, IsInvisible, function (_, right) {
      return new InvisibleSpan(right.kind, BROKEN_LOCATION).wrap();
    });
  });

  // eslint-disable-next-line import/no-extraneous-dependencies
  var Source = /*#__PURE__*/function () {
    function Source(source, module) {
      if (module === void 0) {
        module = 'an unknown module';
      }

      this.source = source;
      this.module = module;
    }
    /**
     * Validate that the character offset represents a position in the source string.
     */


    var _proto = Source.prototype;

    _proto.check = function check(offset) {
      return offset >= 0 && offset <= this.source.length;
    };

    _proto.slice = function slice(start, end) {
      return this.source.slice(start, end);
    };

    _proto.offsetFor = function offsetFor(line, column) {
      return SourceOffset.forHbsPos(this, {
        line: line,
        column: column
      });
    };

    _proto.spanFor = function spanFor(_ref) {
      var start = _ref.start,
          end = _ref.end;
      return SourceSpan.forHbsLoc(this, {
        start: {
          line: start.line,
          column: start.column
        },
        end: {
          line: end.line,
          column: end.column
        }
      });
    };

    _proto.hbsPosFor = function hbsPosFor(offset) {
      var seenLines = 0;
      var seenChars = 0;

      if (offset > this.source.length) {
        return null;
      }

      while (true) {
        var nextLine = this.source.indexOf('\n', seenChars);

        if (offset <= nextLine || nextLine === -1) {
          return {
            line: seenLines + 1,
            column: offset - seenChars
          };
        } else {
          seenLines += 1;
          seenChars = nextLine + 1;
        }
      }
    };

    _proto.charPosFor = function charPosFor(position) {
      var line = position.line,
          column = position.column;
      var sourceString = this.source;
      var sourceLength = sourceString.length;
      var seenLines = 0;
      var seenChars = 0;

      while (true) {
        if (seenChars >= sourceLength) return sourceLength;
        var nextLine = this.source.indexOf('\n', seenChars);
        if (nextLine === -1) nextLine = this.source.length;

        if (seenLines === line - 1) {
          if (seenChars + column > nextLine) return nextLine;

          if (env.DEBUG) {
            var roundTrip = this.hbsPosFor(seenChars + column);
          }

          return seenChars + column;
        } else if (nextLine === -1) {
          return 0;
        } else {
          seenLines += 1;
          seenChars = nextLine + 1;
        }
      }
    };

    return Source;
  }();

  function _defineProperties$2(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$2(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$2(Constructor.prototype, protoProps); if (staticProps) _defineProperties$2(Constructor, staticProps); return Constructor; }
  var PathExpressionImplV1 = /*#__PURE__*/function () {
    function PathExpressionImplV1(original, head, tail, loc) {
      this.original = original;
      this.loc = loc;
      this.type = 'PathExpression';
      this["this"] = false;
      this.data = false; // Cache for the head value.

      this._head = undefined;
      var parts = tail.slice();

      if (head.type === 'ThisHead') {
        this["this"] = true;
      } else if (head.type === 'AtHead') {
        this.data = true;
        parts.unshift(head.name.slice(1));
      } else {
        parts.unshift(head.name);
      }

      this.parts = parts;
    }

    _createClass$2(PathExpressionImplV1, [{
      key: "head",
      get: function get() {
        if (this._head) {
          return this._head;
        }

        var firstPart;

        if (this["this"]) {
          firstPart = 'this';
        } else if (this.data) {
          firstPart = "@" + this.parts[0];
        } else {
          firstPart = this.parts[0];
        }

        var firstPartLoc = this.loc.collapse('start').sliceStartChars({
          chars: firstPart.length
        }).loc;
        return this._head = publicBuilder.head(firstPart, firstPartLoc);
      }
    }, {
      key: "tail",
      get: function get() {
        return this["this"] ? this.parts : this.parts.slice(1);
      }
    }]);

    return PathExpressionImplV1;
  }();

  var _SOURCE;

  function SOURCE() {
    if (!_SOURCE) {
      _SOURCE = new Source('', '(synthetic)');
    }

    return _SOURCE;
  }

  function buildMustache(path, params, hash, raw, loc, strip) {
    if (typeof path === 'string') {
      path = buildPath(path);
    }

    return {
      type: 'MustacheStatement',
      path: path,
      params: params || [],
      hash: hash || buildHash([]),
      escaped: !raw,
      trusting: !!raw,
      loc: buildLoc(loc || null),
      strip: strip || {
        open: false,
        close: false
      }
    };
  }

  function buildBlock(path, params, hash, _defaultBlock, _elseBlock, loc, openStrip, inverseStrip, closeStrip) {
    var defaultBlock;
    var elseBlock;

    if (_defaultBlock.type === 'Template') {

      defaultBlock = util.assign({}, _defaultBlock, {
        type: 'Block'
      });
    } else {
      defaultBlock = _defaultBlock;
    }

    if (_elseBlock !== undefined && _elseBlock !== null && _elseBlock.type === 'Template') {

      elseBlock = util.assign({}, _elseBlock, {
        type: 'Block'
      });
    } else {
      elseBlock = _elseBlock;
    }

    return {
      type: 'BlockStatement',
      path: buildPath(path),
      params: params || [],
      hash: hash || buildHash([]),
      program: defaultBlock || null,
      inverse: elseBlock || null,
      loc: buildLoc(loc || null),
      openStrip: openStrip || {
        open: false,
        close: false
      },
      inverseStrip: inverseStrip || {
        open: false,
        close: false
      },
      closeStrip: closeStrip || {
        open: false,
        close: false
      }
    };
  }

  function buildElementModifier(path, params, hash, loc) {
    return {
      type: 'ElementModifierStatement',
      path: buildPath(path),
      params: params || [],
      hash: hash || buildHash([]),
      loc: buildLoc(loc || null)
    };
  }

  function buildPartial(name, params, hash, indent, loc) {
    return {
      type: 'PartialStatement',
      name: name,
      params: params || [],
      hash: hash || buildHash([]),
      indent: indent || '',
      strip: {
        open: false,
        close: false
      },
      loc: buildLoc(loc || null)
    };
  }

  function buildComment(value, loc) {
    return {
      type: 'CommentStatement',
      value: value,
      loc: buildLoc(loc || null)
    };
  }

  function buildMustacheComment(value, loc) {
    return {
      type: 'MustacheCommentStatement',
      value: value,
      loc: buildLoc(loc || null)
    };
  }

  function buildConcat(parts, loc) {
    if (!util.isPresent(parts)) {
      throw new Error("b.concat requires at least one part");
    }

    return {
      type: 'ConcatStatement',
      parts: parts || [],
      loc: buildLoc(loc || null)
    };
  }

  function buildElement(tag, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        attrs = _options.attrs,
        blockParams = _options.blockParams,
        modifiers = _options.modifiers,
        comments = _options.comments,
        children = _options.children,
        loc = _options.loc;
    var tagName; // this is used for backwards compat, prior to `selfClosing` being part of the ElementNode AST

    var selfClosing = false;

    if (typeof tag === 'object') {
      selfClosing = tag.selfClosing;
      tagName = tag.name;
    } else if (tag.slice(-1) === '/') {
      tagName = tag.slice(0, -1);
      selfClosing = true;
    } else {
      tagName = tag;
    }

    return {
      type: 'ElementNode',
      tag: tagName,
      selfClosing: selfClosing,
      attributes: attrs || [],
      blockParams: blockParams || [],
      modifiers: modifiers || [],
      comments: comments || [],
      children: children || [],
      loc: buildLoc(loc || null)
    };
  }

  function buildAttr(name, value, loc) {
    return {
      type: 'AttrNode',
      name: name,
      value: value,
      loc: buildLoc(loc || null)
    };
  }

  function buildText(chars, loc) {
    return {
      type: 'TextNode',
      chars: chars || '',
      loc: buildLoc(loc || null)
    };
  } // Expressions


  function buildSexpr(path, params, hash, loc) {
    return {
      type: 'SubExpression',
      path: buildPath(path),
      params: params || [],
      hash: hash || buildHash([]),
      loc: buildLoc(loc || null)
    };
  }

  function headToString(head) {
    switch (head.type) {
      case 'AtHead':
        return {
          original: head.name,
          parts: [head.name]
        };

      case 'ThisHead':
        return {
          original: "this",
          parts: []
        };

      case 'VarHead':
        return {
          original: head.name,
          parts: [head.name]
        };
    }
  }

  function buildHead(original, loc) {
    var _original$split = original.split('.'),
        head = _original$split[0],
        tail = _original$split.slice(1);

    var headNode;

    if (head === 'this') {
      headNode = {
        type: 'ThisHead',
        loc: buildLoc(loc || null)
      };
    } else if (head[0] === '@') {
      headNode = {
        type: 'AtHead',
        name: head,
        loc: buildLoc(loc || null)
      };
    } else {
      headNode = {
        type: 'VarHead',
        name: head,
        loc: buildLoc(loc || null)
      };
    }

    return {
      head: headNode,
      tail: tail
    };
  }

  function buildThis(loc) {
    return {
      type: 'ThisHead',
      loc: buildLoc(loc || null)
    };
  }

  function buildAtName(name, loc) {
    return {
      type: 'AtHead',
      name: name,
      loc: buildLoc(loc || null)
    };
  }

  function buildVar(name, loc) {
    return {
      type: 'VarHead',
      name: name,
      loc: buildLoc(loc || null)
    };
  }

  function buildHeadFromString(head, loc) {
    if (head[0] === '@') {
      return buildAtName(head, loc);
    } else if (head === 'this') {
      return buildThis(loc);
    } else {
      return buildVar(head, loc);
    }
  }

  function buildNamedBlockName(name, loc) {
    return {
      type: 'NamedBlockName',
      name: name,
      loc: buildLoc(loc || null)
    };
  }

  function buildCleanPath(head, tail, loc) {
    var _headToString = headToString(head),
        originalHead = _headToString.original,
        headParts = _headToString.parts;

    var parts = [].concat(headParts, tail);
    var original = [].concat(originalHead, parts).join('.');
    return new PathExpressionImplV1(original, head, tail, buildLoc(loc || null));
  }

  function buildPath(path, loc) {
    if (typeof path !== 'string') {
      if ('type' in path) {
        return path;
      } else {
        var _buildHead = buildHead(path.head, SourceSpan.broken()),
            _head = _buildHead.head,
            _tail = _buildHead.tail;

        var _headToString2 = headToString(_head),
            originalHead = _headToString2.original;

        return new PathExpressionImplV1([originalHead].concat(_tail).join('.'), _head, _tail, buildLoc(loc || null));
      }
    }

    var _buildHead2 = buildHead(path, SourceSpan.broken()),
        head = _buildHead2.head,
        tail = _buildHead2.tail;

    return new PathExpressionImplV1(path, head, tail, buildLoc(loc || null));
  }

  function buildLiteral(type, value, loc) {
    return {
      type: type,
      value: value,
      original: value,
      loc: buildLoc(loc || null)
    };
  } // Miscellaneous


  function buildHash(pairs, loc) {
    return {
      type: 'Hash',
      pairs: pairs || [],
      loc: buildLoc(loc || null)
    };
  }

  function buildPair(key, value, loc) {
    return {
      type: 'HashPair',
      key: key,
      value: value,
      loc: buildLoc(loc || null)
    };
  }

  function buildProgram(body, blockParams, loc) {
    return {
      type: 'Template',
      body: body || [],
      blockParams: blockParams || [],
      loc: buildLoc(loc || null)
    };
  }

  function buildBlockItself(body, blockParams, chained, loc) {
    if (chained === void 0) {
      chained = false;
    }

    return {
      type: 'Block',
      body: body || [],
      blockParams: blockParams || [],
      chained: chained,
      loc: buildLoc(loc || null)
    };
  }

  function buildTemplate(body, blockParams, loc) {
    return {
      type: 'Template',
      body: body || [],
      blockParams: blockParams || [],
      loc: buildLoc(loc || null)
    };
  }

  function buildPosition(line, column) {
    return {
      line: line,
      column: column
    };
  }

  function buildLoc() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length === 1) {
      var loc = args[0];

      if (loc && typeof loc === 'object') {
        return SourceSpan.forHbsLoc(SOURCE(), loc);
      } else {
        return SourceSpan.forHbsLoc(SOURCE(), SYNTHETIC_LOCATION);
      }
    } else {
      var startLine = args[0],
          startColumn = args[1],
          endLine = args[2],
          endColumn = args[3],
          _source = args[4];
      var source = _source ? new Source('', _source) : SOURCE();
      return SourceSpan.forHbsLoc(source, {
        start: {
          line: startLine,
          column: startColumn
        },
        end: {
          line: endLine,
          column: endColumn
        }
      });
    }
  }

  var publicBuilder = {
    mustache: buildMustache,
    block: buildBlock,
    partial: buildPartial,
    comment: buildComment,
    mustacheComment: buildMustacheComment,
    element: buildElement,
    elementModifier: buildElementModifier,
    attr: buildAttr,
    text: buildText,
    sexpr: buildSexpr,
    concat: buildConcat,
    hash: buildHash,
    pair: buildPair,
    literal: buildLiteral,
    program: buildProgram,
    blockItself: buildBlockItself,
    template: buildTemplate,
    loc: buildLoc,
    pos: buildPosition,
    path: buildPath,
    fullPath: buildCleanPath,
    head: buildHeadFromString,
    at: buildAtName,
    "var": buildVar,
    "this": buildThis,
    blockName: buildNamedBlockName,
    string: literal('StringLiteral'),
    "boolean": literal('BooleanLiteral'),
    number: literal('NumberLiteral'),
    undefined: function (_undefined) {
      function undefined$1() {
        return _undefined.apply(this, arguments);
      }

      undefined$1.toString = function () {
        return _undefined.toString();
      };

      return undefined$1;
    }(function () {
      return buildLiteral('UndefinedLiteral', undefined);
    }),
    "null": function _null() {
      return buildLiteral('NullLiteral', null);
    }
  };

  function literal(type) {
    return function (value, loc) {
      return buildLiteral(type, value, loc);
    };
  }



  var api = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  /**
   * A free variable is resolved according to a resolution rule:
   *
   * 1. Strict resolution
   * 2. Namespaced resolution
   * 3. Fallback resolution
   */

  /**
   * Strict resolution is used:
   *
   * 1. in a strict mode template
   * 2. in an unambiguous invocation with dot paths
   */
  var StrictResolution = /*#__PURE__*/function () {
    function StrictResolution() {
      this.isAngleBracket = false;
    }

    var _proto = StrictResolution.prototype;

    _proto.resolution = function resolution() {
      return 31
      /* GetStrictFree */
      ;
    };

    _proto.serialize = function serialize() {
      return 'Strict';
    };

    return StrictResolution;
  }();
  var STRICT_RESOLUTION = new StrictResolution();
  /**
   * A `LooseModeResolution` includes:
   *
   * - 0 or more namespaces to resolve the variable in
   * - optional fallback behavior
   *
   * In practice, there are a limited number of possible combinations of these degrees of freedom,
   * and they are captured by the `Ambiguity` union below.
   */

  var LooseModeResolution = /*#__PURE__*/function () {
    function LooseModeResolution(ambiguity, isAngleBracket) {
      if (isAngleBracket === void 0) {
        isAngleBracket = false;
      }

      this.ambiguity = ambiguity;
      this.isAngleBracket = isAngleBracket;
    }
    /**
     * Namespaced resolution is used in an unambiguous syntax position:
     *
     * 1. `(sexp)` (namespace: `Helper`)
     * 2. `{{#block}}` (namespace: `Component`)
     * 3. `<a {{modifier}}>` (namespace: `Modifier`)
     * 4. `<Component />` (namespace: `Component`)
     *
     * @see {NamespacedAmbiguity}
     */


    LooseModeResolution.namespaced = function namespaced(namespace, isAngleBracket) {
      if (isAngleBracket === void 0) {
        isAngleBracket = false;
      }

      return new LooseModeResolution({
        namespaces: [namespace],
        fallback: false
      }, isAngleBracket);
    }
    /**
     * Fallback resolution is used when no namespaced resolutions are possible, but fallback
     * resolution is still allowed.
     *
     * ```hbs
     * {{x.y}}
     * ```
     *
     * @see {FallbackAmbiguity}
     */
    ;

    LooseModeResolution.fallback = function fallback() {
      return new LooseModeResolution({
        namespaces: [],
        fallback: true
      });
    }
    /**
     * Append resolution is used when the variable should be resolved in both the `component` and
     * `helper` namespaces. Fallback resolution is optional.
     *
     * ```hbs
     * {{x}}
     * ```
     *
     * ^ `x` should be resolved in the `component` and `helper` namespaces with fallback resolution.
     *
     * ```hbs
     * {{x y}}
     * ```
     *
     * ^ `x` should be resolved in the `component` and `helper` namespaces without fallback
     * resolution.
     *
     * @see {ComponentOrHelperAmbiguity}
     */
    ;

    LooseModeResolution.append = function append(_ref) {
      var invoke = _ref.invoke;
      return new LooseModeResolution({
        namespaces: ["Component"
        /* Component */
        , "Helper"
        /* Helper */
        ],
        fallback: !invoke
      });
    }
    /**
     * Trusting append resolution is used when the variable should be resolved in both the `component` and
     * `helper` namespaces. Fallback resolution is optional.
     *
     * ```hbs
     * {{{x}}}
     * ```
     *
     * ^ `x` should be resolved in the `component` and `helper` namespaces with fallback resolution.
     *
     * ```hbs
     * {{{x y}}}
     * ```
     *
     * ^ `x` should be resolved in the `component` and `helper` namespaces without fallback
     * resolution.
     *
     * @see {HelperAmbiguity}
     */
    ;

    LooseModeResolution.trustingAppend = function trustingAppend(_ref2) {
      var invoke = _ref2.invoke;
      return new LooseModeResolution({
        namespaces: ["Helper"
        /* Helper */
        ],
        fallback: !invoke
      });
    }
    /**
     * Attribute resolution is used when the variable should be resolved as a `helper` with fallback
     * resolution.
     *
     * ```hbs
     * <a href={{x}} />
     * <a href="{{x}}.html" />
     * ```
     *
     * ^ resolved in the `helper` namespace with fallback
     *
     * @see {HelperAmbiguity}
     */
    ;

    LooseModeResolution.attr = function attr() {
      return new LooseModeResolution({
        namespaces: ["Helper"
        /* Helper */
        ],
        fallback: true
      });
    };

    var _proto2 = LooseModeResolution.prototype;

    _proto2.resolution = function resolution() {
      if (this.ambiguity.namespaces.length === 0) {
        return 31
        /* GetStrictFree */
        ;
      } else if (this.ambiguity.namespaces.length === 1) {
        if (this.ambiguity.fallback) {
          // simple namespaced resolution with fallback must be attr={{x}}
          return 36
          /* GetFreeAsHelperHeadOrThisFallback */
          ;
        } else {
          // simple namespaced resolution without fallback
          switch (this.ambiguity.namespaces[0]) {
            case "Helper"
            /* Helper */
            :
              return 37
              /* GetFreeAsHelperHead */
              ;

            case "Modifier"
            /* Modifier */
            :
              return 38
              /* GetFreeAsModifierHead */
              ;

            case "Component"
            /* Component */
            :
              return 39
              /* GetFreeAsComponentHead */
              ;
          }
        }
      } else if (this.ambiguity.fallback) {
        // component or helper + fallback ({{something}})
        return 34
        /* GetFreeAsComponentOrHelperHeadOrThisFallback */
        ;
      } else {
          // component or helper without fallback ({{something something}})
          return 35
          /* GetFreeAsComponentOrHelperHead */
          ;
        }
    };

    _proto2.serialize = function serialize() {
      if (this.ambiguity.namespaces.length === 0) {
        return 'Loose';
      } else if (this.ambiguity.namespaces.length === 1) {
        if (this.ambiguity.fallback) {
          // simple namespaced resolution with fallback must be attr={{x}}
          return ['ambiguous', "Attr"
          /* Attr */
          ];
        } else {
          return ['ns', this.ambiguity.namespaces[0]];
        }
      } else if (this.ambiguity.fallback) {
        // component or helper + fallback ({{something}})
        return ['ambiguous', "Append"
        /* Append */
        ];
      } else {
        // component or helper without fallback ({{something something}})
        return ['ambiguous', "Invoke"
        /* Invoke */
        ];
      }
    };

    return LooseModeResolution;
  }();
  var ARGUMENT_RESOLUTION = LooseModeResolution.fallback();
  function loadResolution(resolution) {
    if (typeof resolution === 'string') {
      switch (resolution) {
        case 'Loose':
          return LooseModeResolution.fallback();

        case 'Strict':
          return STRICT_RESOLUTION;
      }
    }

    switch (resolution[0]) {
      case 'ambiguous':
        switch (resolution[1]) {
          case "Append"
          /* Append */
          :
            return LooseModeResolution.append({
              invoke: false
            });

          case "Attr"
          /* Attr */
          :
            return LooseModeResolution.attr();

          case "Invoke"
          /* Invoke */
          :
            return LooseModeResolution.append({
              invoke: true
            });
        }

      case 'ns':
        return LooseModeResolution.namespaced(resolution[1]);
    }
  }

  function node(name) {
    if (name !== undefined) {
      var type = name;
      return {
        fields: function fields() {
          return /*#__PURE__*/function () {
            function _class(fields) {
              this.type = type;
              util.assign(this, fields);
            }

            return _class;
          }();
        }
      };
    } else {
      return {
        fields: function fields() {
          return /*#__PURE__*/function () {
            function _class2(fields) {
              util.assign(this, fields);
            }

            return _class2;
          }();
        }
      };
    }
  }

  function _defineProperties$3(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$3(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$3(Constructor.prototype, protoProps); if (staticProps) _defineProperties$3(Constructor, staticProps); return Constructor; }

  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
  /**
   * Corresponds to syntaxes with positional and named arguments:
   *
   * - SubExpression
   * - Invoking Append
   * - Invoking attributes
   * - InvokeBlock
   *
   * If `Args` is empty, the `SourceOffsets` for this node should be the collapsed position
   * immediately after the parent call node's `callee`.
   */

  var Args = /*#__PURE__*/function (_node$fields) {
    _inheritsLoose(Args, _node$fields);

    function Args() {
      return _node$fields.apply(this, arguments) || this;
    }

    Args.empty = function empty(loc) {
      return new Args({
        loc: loc,
        positional: PositionalArguments.empty(loc),
        named: NamedArguments.empty(loc)
      });
    };

    Args.named = function named(_named) {
      return new Args({
        loc: _named.loc,
        positional: PositionalArguments.empty(_named.loc.collapse('end')),
        named: _named
      });
    };

    var _proto = Args.prototype;

    _proto.nth = function nth(offset) {
      return this.positional.nth(offset);
    };

    _proto.get = function get(name) {
      return this.named.get(name);
    };

    _proto.isEmpty = function isEmpty() {
      return this.positional.isEmpty() && this.named.isEmpty();
    };

    return Args;
  }(node().fields());
  /**
   * Corresponds to positional arguments.
   *
   * If `PositionalArguments` is empty, the `SourceOffsets` for this node should be the collapsed
   * position immediately after the parent call node's `callee`.
   */

  var PositionalArguments = /*#__PURE__*/function (_node$fields2) {
    _inheritsLoose(PositionalArguments, _node$fields2);

    function PositionalArguments() {
      return _node$fields2.apply(this, arguments) || this;
    }

    PositionalArguments.empty = function empty(loc) {
      return new PositionalArguments({
        loc: loc,
        exprs: []
      });
    };

    var _proto2 = PositionalArguments.prototype;

    _proto2.nth = function nth(offset) {
      return this.exprs[offset] || null;
    };

    _proto2.isEmpty = function isEmpty() {
      return this.exprs.length === 0;
    };

    _createClass$3(PositionalArguments, [{
      key: "size",
      get: function get() {
        return this.exprs.length;
      }
    }]);

    return PositionalArguments;
  }(node().fields());
  /**
   * Corresponds to named arguments.
   *
   * If `PositionalArguments` and `NamedArguments` are empty, the `SourceOffsets` for this node should
   * be the same as the `Args` node that contains this node.
   *
   * If `PositionalArguments` is not empty but `NamedArguments` is empty, the `SourceOffsets` for this
   * node should be the collapsed position immediately after the last positional argument.
   */

  var NamedArguments = /*#__PURE__*/function (_node$fields3) {
    _inheritsLoose(NamedArguments, _node$fields3);

    function NamedArguments() {
      return _node$fields3.apply(this, arguments) || this;
    }

    NamedArguments.empty = function empty(loc) {
      return new NamedArguments({
        loc: loc,
        entries: []
      });
    };

    var _proto3 = NamedArguments.prototype;

    _proto3.get = function get(name) {
      var entry = this.entries.filter(function (e) {
        return e.name.chars === name;
      })[0];
      return entry ? entry.value : null;
    };

    _proto3.isEmpty = function isEmpty() {
      return this.entries.length === 0;
    };

    _createClass$3(NamedArguments, [{
      key: "size",
      get: function get() {
        return this.entries.length;
      }
    }]);

    return NamedArguments;
  }(node().fields());
  /**
   * Corresponds to a single named argument.
   *
   * ```hbs
   * x=<expr>
   * ```
   */

  var NamedArgument = function NamedArgument(options) {
    this.loc = options.name.loc.extend(options.value.loc);
    this.name = options.name;
    this.value = options.value;
  };

  function _inheritsLoose$1(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
  /**
   * `HtmlAttr` nodes are valid HTML attributes, with or without a value.
   *
   * Exceptions:
   *
   * - `...attributes` is `SplatAttr`
   * - `@x=<value>` is `ComponentArg`
   */

  var HtmlAttr = /*#__PURE__*/function (_node$fields) {
    _inheritsLoose$1(HtmlAttr, _node$fields);

    function HtmlAttr() {
      return _node$fields.apply(this, arguments) || this;
    }

    return HtmlAttr;
  }(node('HtmlAttr').fields());
  var SplatAttr = /*#__PURE__*/function (_node$fields2) {
    _inheritsLoose$1(SplatAttr, _node$fields2);

    function SplatAttr() {
      return _node$fields2.apply(this, arguments) || this;
    }

    return SplatAttr;
  }(node('SplatAttr').fields());
  /**
   * Corresponds to an argument passed by a component (`@x=<value>`)
   */

  var ComponentArg = /*#__PURE__*/function (_node$fields3) {
    _inheritsLoose$1(ComponentArg, _node$fields3);

    function ComponentArg() {
      return _node$fields3.apply(this, arguments) || this;
    }

    var _proto = ComponentArg.prototype;

    /**
     * Convert the component argument into a named argument node
     */
    _proto.toNamedArgument = function toNamedArgument() {
      return new NamedArgument({
        name: this.name,
        value: this.value
      });
    };

    return ComponentArg;
  }(node().fields());
  /**
   * An `ElementModifier` is just a normal call node in modifier position.
   */

  var ElementModifier = /*#__PURE__*/function (_node$fields4) {
    _inheritsLoose$1(ElementModifier, _node$fields4);

    function ElementModifier() {
      return _node$fields4.apply(this, arguments) || this;
    }

    return ElementModifier;
  }(node('ElementModifier').fields());

  var SpanList = /*#__PURE__*/function () {
    function SpanList(span) {
      if (span === void 0) {
        span = [];
      }

      this._span = span;
    }

    SpanList.range = function range(span, fallback) {
      if (fallback === void 0) {
        fallback = SourceSpan.NON_EXISTENT;
      }

      return new SpanList(span.map(loc)).getRangeOffset(fallback);
    };

    var _proto = SpanList.prototype;

    _proto.add = function add(offset) {
      this._span.push(offset);
    };

    _proto.getRangeOffset = function getRangeOffset(fallback) {
      if (this._span.length === 0) {
        return fallback;
      } else {
        var first = this._span[0];
        var last = this._span[this._span.length - 1];
        return first.extend(last);
      }
    };

    return SpanList;
  }();
  function loc(span) {
    if (Array.isArray(span)) {
      var first = span[0];
      var last = span[span.length - 1];
      return loc(first).extend(loc(last));
    } else if (span instanceof SourceSpan) {
      return span;
    } else {
      return span.loc;
    }
  }
  function hasSpan(span) {
    if (Array.isArray(span) && span.length === 0) {
      return false;
    }

    return true;
  }
  function maybeLoc(location, fallback) {
    if (hasSpan(location)) {
      return loc(location);
    } else {
      return fallback;
    }
  }

  function _defineProperties$4(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$4(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$4(Constructor.prototype, protoProps); if (staticProps) _defineProperties$4(Constructor, staticProps); return Constructor; }

  function _inheritsLoose$2(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
  var GlimmerComment = /*#__PURE__*/function (_node$fields) {
    _inheritsLoose$2(GlimmerComment, _node$fields);

    function GlimmerComment() {
      return _node$fields.apply(this, arguments) || this;
    }

    return GlimmerComment;
  }(node('GlimmerComment').fields());
  var HtmlText = /*#__PURE__*/function (_node$fields2) {
    _inheritsLoose$2(HtmlText, _node$fields2);

    function HtmlText() {
      return _node$fields2.apply(this, arguments) || this;
    }

    return HtmlText;
  }(node('HtmlText').fields());
  var HtmlComment = /*#__PURE__*/function (_node$fields3) {
    _inheritsLoose$2(HtmlComment, _node$fields3);

    function HtmlComment() {
      return _node$fields3.apply(this, arguments) || this;
    }

    return HtmlComment;
  }(node('HtmlComment').fields());
  var AppendContent = /*#__PURE__*/function (_node$fields4) {
    _inheritsLoose$2(AppendContent, _node$fields4);

    function AppendContent() {
      return _node$fields4.apply(this, arguments) || this;
    }

    _createClass$4(AppendContent, [{
      key: "callee",
      get: function get() {
        if (this.value.type === 'Call') {
          return this.value.callee;
        } else {
          return this.value;
        }
      }
    }, {
      key: "args",
      get: function get() {
        if (this.value.type === 'Call') {
          return this.value.args;
        } else {
          return Args.empty(this.value.loc.collapse('end'));
        }
      }
    }]);

    return AppendContent;
  }(node('AppendContent').fields());
  var InvokeBlock = /*#__PURE__*/function (_node$fields5) {
    _inheritsLoose$2(InvokeBlock, _node$fields5);

    function InvokeBlock() {
      return _node$fields5.apply(this, arguments) || this;
    }

    return InvokeBlock;
  }(node('InvokeBlock').fields());
  /**
   * Corresponds to a component invocation. When the content of a component invocation contains no
   * named blocks, `blocks` contains a single named block named `"default"`. When a component
   * invocation is self-closing, `blocks` is empty.
   */

  var InvokeComponent = /*#__PURE__*/function (_node$fields6) {
    _inheritsLoose$2(InvokeComponent, _node$fields6);

    function InvokeComponent() {
      return _node$fields6.apply(this, arguments) || this;
    }

    _createClass$4(InvokeComponent, [{
      key: "args",
      get: function get() {
        var entries = this.componentArgs.map(function (a) {
          return a.toNamedArgument();
        });
        return Args.named(new NamedArguments({
          loc: SpanList.range(entries, this.callee.loc.collapse('end')),
          entries: entries
        }));
      }
    }]);

    return InvokeComponent;
  }(node('InvokeComponent').fields());
  /**
   * Corresponds to a simple HTML element. The AST allows component arguments and modifiers to support
   * future extensions.
   */

  var SimpleElement = /*#__PURE__*/function (_node$fields7) {
    _inheritsLoose$2(SimpleElement, _node$fields7);

    function SimpleElement() {
      return _node$fields7.apply(this, arguments) || this;
    }

    _createClass$4(SimpleElement, [{
      key: "args",
      get: function get() {
        var entries = this.componentArgs.map(function (a) {
          return a.toNamedArgument();
        });
        return Args.named(new NamedArguments({
          loc: SpanList.range(entries, this.tag.loc.collapse('end')),
          entries: entries
        }));
      }
    }]);

    return SimpleElement;
  }(node('SimpleElement').fields());

  function _inheritsLoose$3(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
  /**
   * Corresponds to a Handlebars literal.
   *
   * @see {LiteralValue}
   */

  var LiteralExpression = /*#__PURE__*/function (_node$fields) {
    _inheritsLoose$3(LiteralExpression, _node$fields);

    function LiteralExpression() {
      return _node$fields.apply(this, arguments) || this;
    }

    var _proto = LiteralExpression.prototype;

    _proto.toSlice = function toSlice() {
      return new SourceSlice({
        loc: this.loc,
        chars: this.value
      });
    };

    return LiteralExpression;
  }(node('Literal').fields());
  /**
   * Returns true if an input {@see ExpressionNode} is a literal.
   */

  function isLiteral(node, kind) {
    if (node.type === 'Literal') {
      if (kind === undefined) {
        return true;
      } else if (kind === 'null') {
        return node.value === null;
      } else {
        return typeof node.value === kind;
      }
    } else {
      return false;
    }
  }
  /**
   * Corresponds to a path in expression position.
   *
   * ```hbs
   * this
   * this.x
   * @x
   * @x.y
   * x
   * x.y
   * ```
   */

  var PathExpression = /*#__PURE__*/function (_node$fields2) {
    _inheritsLoose$3(PathExpression, _node$fields2);

    function PathExpression() {
      return _node$fields2.apply(this, arguments) || this;
    }

    return PathExpression;
  }(node('Path').fields());
  /**
   * Corresponds to a parenthesized call expression.
   *
   * ```hbs
   * (x)
   * (x.y)
   * (x y)
   * (x.y z)
   * ```
   */

  var CallExpression = /*#__PURE__*/function (_node$fields3) {
    _inheritsLoose$3(CallExpression, _node$fields3);

    function CallExpression() {
      return _node$fields3.apply(this, arguments) || this;
    }

    return CallExpression;
  }(node('Call').fields());
  /**
   * Corresponds to a possible deprecated helper call. Must be:
   *
   * 1. A free variable (not this.foo, not @foo, not local).
   * 2. Argument-less.
   * 3. In a component invocation's named argument position.
   * 4. Not parenthesized (not @bar={{(helper)}}).
   * 5. Not interpolated (not @bar="{{helper}}").
   *
   * ```hbs
   * <Foo @bar={{helper}} />
   * ```
   */

  var DeprecatedCallExpression = /*#__PURE__*/function (_node$fields4) {
    _inheritsLoose$3(DeprecatedCallExpression, _node$fields4);

    function DeprecatedCallExpression() {
      return _node$fields4.apply(this, arguments) || this;
    }

    return DeprecatedCallExpression;
  }(node('DeprecatedCall').fields());
  /**
   * Corresponds to an interpolation in attribute value position.
   *
   * ```hbs
   * <a href="{{url}}.html"
   * ```
   */

  var InterpolateExpression = /*#__PURE__*/function (_node$fields5) {
    _inheritsLoose$3(InterpolateExpression, _node$fields5);

    function InterpolateExpression() {
      return _node$fields5.apply(this, arguments) || this;
    }

    return InterpolateExpression;
  }(node('Interpolate').fields());

  function _inheritsLoose$4(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
  /**
   * Corresponds to `this` at the head of an expression.
   */

  var ThisReference = /*#__PURE__*/function (_node$fields) {
    _inheritsLoose$4(ThisReference, _node$fields);

    function ThisReference() {
      return _node$fields.apply(this, arguments) || this;
    }

    return ThisReference;
  }(node('This').fields());
  /**
   * Corresponds to `@<ident>` at the beginning of an expression.
   */

  var ArgReference = /*#__PURE__*/function (_node$fields2) {
    _inheritsLoose$4(ArgReference, _node$fields2);

    function ArgReference() {
      return _node$fields2.apply(this, arguments) || this;
    }

    return ArgReference;
  }(node('Arg').fields());
  /**
   * Corresponds to `<ident>` at the beginning of an expression, when `<ident>` is in the current
   * block's scope.
   */

  var LocalVarReference = /*#__PURE__*/function (_node$fields3) {
    _inheritsLoose$4(LocalVarReference, _node$fields3);

    function LocalVarReference() {
      return _node$fields3.apply(this, arguments) || this;
    }

    return LocalVarReference;
  }(node('Local').fields());
  /**
   * Corresponds to `<ident>` at the beginning of an expression, when `<ident>` is *not* in the
   * current block's scope.
   *
   * The `resolution: FreeVarResolution` field describes how to resolve the free variable.
   *
   * Note: In strict mode, it must always be a variable that is in a concrete JavaScript scope that
   * the template will be installed into.
   */

  var FreeVarReference = /*#__PURE__*/function (_node$fields4) {
    _inheritsLoose$4(FreeVarReference, _node$fields4);

    function FreeVarReference() {
      return _node$fields4.apply(this, arguments) || this;
    }

    return FreeVarReference;
  }(node('Free').fields());

  function _defineProperties$5(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$5(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$5(Constructor.prototype, protoProps); if (staticProps) _defineProperties$5(Constructor, staticProps); return Constructor; }

  function _inheritsLoose$5(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
  /**
   * Corresponds to an entire template.
   */

  var Template = /*#__PURE__*/function (_node$fields) {
    _inheritsLoose$5(Template, _node$fields);

    function Template() {
      return _node$fields.apply(this, arguments) || this;
    }

    return Template;
  }(node().fields());
  /**
   * Represents a block. In principle this could be merged with `NamedBlock`, because all cases
   * involving blocks have at least a notional name.
   */

  var Block = /*#__PURE__*/function (_node$fields2) {
    _inheritsLoose$5(Block, _node$fields2);

    function Block() {
      return _node$fields2.apply(this, arguments) || this;
    }

    return Block;
  }(node().fields());
  /**
   * Corresponds to a collection of named blocks.
   */

  var NamedBlocks = /*#__PURE__*/function (_node$fields3) {
    _inheritsLoose$5(NamedBlocks, _node$fields3);

    function NamedBlocks() {
      return _node$fields3.apply(this, arguments) || this;
    }

    var _proto = NamedBlocks.prototype;

    _proto.get = function get(name) {
      return this.blocks.filter(function (block) {
        return block.name.chars === name;
      })[0] || null;
    };

    return NamedBlocks;
  }(node().fields());
  /**
   * Corresponds to a single named block. This is used for anonymous named blocks (`default` and
   * `else`).
   */

  var NamedBlock = /*#__PURE__*/function (_node$fields4) {
    _inheritsLoose$5(NamedBlock, _node$fields4);

    function NamedBlock() {
      return _node$fields4.apply(this, arguments) || this;
    }

    _createClass$5(NamedBlock, [{
      key: "args",
      get: function get() {
        var entries = this.componentArgs.map(function (a) {
          return a.toNamedArgument();
        });
        return Args.named(new NamedArguments({
          loc: SpanList.range(entries, this.name.loc.collapse('end')),
          entries: entries
        }));
      }
    }]);

    return NamedBlock;
  }(node().fields());



  var api$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    StrictResolution: StrictResolution,
    STRICT_RESOLUTION: STRICT_RESOLUTION,
    LooseModeResolution: LooseModeResolution,
    ARGUMENT_RESOLUTION: ARGUMENT_RESOLUTION,
    loadResolution: loadResolution,
    node: node,
    Args: Args,
    PositionalArguments: PositionalArguments,
    NamedArguments: NamedArguments,
    NamedArgument: NamedArgument,
    HtmlAttr: HtmlAttr,
    SplatAttr: SplatAttr,
    ComponentArg: ComponentArg,
    ElementModifier: ElementModifier,
    GlimmerComment: GlimmerComment,
    HtmlText: HtmlText,
    HtmlComment: HtmlComment,
    AppendContent: AppendContent,
    InvokeBlock: InvokeBlock,
    InvokeComponent: InvokeComponent,
    SimpleElement: SimpleElement,
    LiteralExpression: LiteralExpression,
    isLiteral: isLiteral,
    PathExpression: PathExpression,
    CallExpression: CallExpression,
    DeprecatedCallExpression: DeprecatedCallExpression,
    InterpolateExpression: InterpolateExpression,
    ThisReference: ThisReference,
    ArgReference: ArgReference,
    LocalVarReference: LocalVarReference,
    FreeVarReference: FreeVarReference,
    Template: Template,
    Block: Block,
    NamedBlocks: NamedBlocks,
    NamedBlock: NamedBlock
  });

  var ATTR_VALUE_REGEX_TEST = /[\xA0"&]/;
  var ATTR_VALUE_REGEX_REPLACE = new RegExp(ATTR_VALUE_REGEX_TEST.source, 'g');
  var TEXT_REGEX_TEST = /[\xA0&<>]/;
  var TEXT_REGEX_REPLACE = new RegExp(TEXT_REGEX_TEST.source, 'g');

  function attrValueReplacer(_char) {
    switch (_char.charCodeAt(0)) {
      case 160
      /* NBSP */
      :
        return '&nbsp;';

      case 34
      /* QUOT */
      :
        return '&quot;';

      case 38
      /* AMP */
      :
        return '&amp;';

      default:
        return _char;
    }
  }

  function textReplacer(_char2) {
    switch (_char2.charCodeAt(0)) {
      case 160
      /* NBSP */
      :
        return '&nbsp;';

      case 38
      /* AMP */
      :
        return '&amp;';

      case 60
      /* LT */
      :
        return '&lt;';

      case 62
      /* GT */
      :
        return '&gt;';

      default:
        return _char2;
    }
  }

  function escapeAttrValue(attrValue) {
    if (ATTR_VALUE_REGEX_TEST.test(attrValue)) {
      return attrValue.replace(ATTR_VALUE_REGEX_REPLACE, attrValueReplacer);
    }

    return attrValue;
  }
  function escapeText(text) {
    if (TEXT_REGEX_TEST.test(text)) {
      return text.replace(TEXT_REGEX_REPLACE, textReplacer);
    }

    return text;
  }
  function sortByLoc(a, b) {
    // If either is invisible, don't try to order them
    if (a.loc.isInvisible || b.loc.isInvisible) {
      return 0;
    }

    if (a.loc.startPosition.line < b.loc.startPosition.line) {
      return -1;
    }

    if (a.loc.startPosition.line === b.loc.startPosition.line && a.loc.startPosition.column < b.loc.startPosition.column) {
      return -1;
    }

    if (a.loc.startPosition.line === b.loc.startPosition.line && a.loc.startPosition.column === b.loc.startPosition.column) {
      return 0;
    }

    return 1;
  }

  function _createForOfIteratorHelperLoose$1(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

  function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

  function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  var voidMap = Object.create(null);
  var voidTagNames = 'area base br col command embed hr img input keygen link meta param source track wbr';
  voidTagNames.split(' ').forEach(function (tagName) {
    voidMap[tagName] = true;
  });
  var NON_WHITESPACE = /\S/;

  var Printer = /*#__PURE__*/function () {
    function Printer(options) {
      this.buffer = '';
      this.options = options;
    }
    /*
      This is used by _all_ methods on this Printer class that add to `this.buffer`,
      it allows consumers of the printer to use alternate string representations for
      a given node.
         The primary use case for this are things like source -> source codemod utilities.
      For example, ember-template-recast attempts to always preserve the original string
      formatting in each AST node if no modifications are made to it.
    */


    var _proto = Printer.prototype;

    _proto.handledByOverride = function handledByOverride(node, ensureLeadingWhitespace) {
      if (ensureLeadingWhitespace === void 0) {
        ensureLeadingWhitespace = false;
      }

      if (this.options.override !== undefined) {
        var result = this.options.override(node, this.options);

        if (typeof result === 'string') {
          if (ensureLeadingWhitespace && result !== '' && NON_WHITESPACE.test(result[0])) {
            result = " " + result;
          }

          this.buffer += result;
          return true;
        }
      }

      return false;
    };

    _proto.Node = function Node(node) {
      switch (node.type) {
        case 'MustacheStatement':
        case 'BlockStatement':
        case 'PartialStatement':
        case 'MustacheCommentStatement':
        case 'CommentStatement':
        case 'TextNode':
        case 'ElementNode':
        case 'AttrNode':
        case 'Block':
        case 'Template':
          return this.TopLevelStatement(node);

        case 'StringLiteral':
        case 'BooleanLiteral':
        case 'NumberLiteral':
        case 'UndefinedLiteral':
        case 'NullLiteral':
        case 'PathExpression':
        case 'SubExpression':
          return this.Expression(node);

        case 'Program':
          return this.Block(node);

        case 'ConcatStatement':
          // should have an AttrNode parent
          return this.ConcatStatement(node);

        case 'Hash':
          return this.Hash(node);

        case 'HashPair':
          return this.HashPair(node);

        case 'ElementModifierStatement':
          return this.ElementModifierStatement(node);
      }
    };

    _proto.Expression = function Expression(expression) {
      switch (expression.type) {
        case 'StringLiteral':
        case 'BooleanLiteral':
        case 'NumberLiteral':
        case 'UndefinedLiteral':
        case 'NullLiteral':
          return this.Literal(expression);

        case 'PathExpression':
          return this.PathExpression(expression);

        case 'SubExpression':
          return this.SubExpression(expression);
      }
    };

    _proto.Literal = function Literal(literal) {
      switch (literal.type) {
        case 'StringLiteral':
          return this.StringLiteral(literal);

        case 'BooleanLiteral':
          return this.BooleanLiteral(literal);

        case 'NumberLiteral':
          return this.NumberLiteral(literal);

        case 'UndefinedLiteral':
          return this.UndefinedLiteral(literal);

        case 'NullLiteral':
          return this.NullLiteral(literal);
      }
    };

    _proto.TopLevelStatement = function TopLevelStatement(statement) {
      switch (statement.type) {
        case 'MustacheStatement':
          return this.MustacheStatement(statement);

        case 'BlockStatement':
          return this.BlockStatement(statement);

        case 'PartialStatement':
          return this.PartialStatement(statement);

        case 'MustacheCommentStatement':
          return this.MustacheCommentStatement(statement);

        case 'CommentStatement':
          return this.CommentStatement(statement);

        case 'TextNode':
          return this.TextNode(statement);

        case 'ElementNode':
          return this.ElementNode(statement);

        case 'Block':
        case 'Template':
          return this.Block(statement);

        case 'AttrNode':
          // should have element
          return this.AttrNode(statement);
      }
    };

    _proto.Block = function Block(block) {
      /*
        When processing a template like:
             ```hbs
        {{#if whatever}}
          whatever
        {{else if somethingElse}}
          something else
        {{else}}
          fallback
        {{/if}}
        ```
             The AST still _effectively_ looks like:
             ```hbs
        {{#if whatever}}
          whatever
        {{else}}{{#if somethingElse}}
          something else
        {{else}}
          fallback
        {{/if}}{{/if}}
        ```
             The only way we can tell if that is the case is by checking for
        `block.chained`, but unfortunately when the actual statements are
        processed the `block.body[0]` node (which will always be a
        `BlockStatement`) has no clue that its ancestor `Block` node was
        chained.
             This "forwards" the `chained` setting so that we can check
        it later when processing the `BlockStatement`.
      */
      if (block.chained) {
        var firstChild = block.body[0];
        firstChild.chained = true;
      }

      if (this.handledByOverride(block)) {
        return;
      }

      this.TopLevelStatements(block.body);
    };

    _proto.TopLevelStatements = function TopLevelStatements(statements) {
      var _this = this;

      statements.forEach(function (statement) {
        return _this.TopLevelStatement(statement);
      });
    };

    _proto.ElementNode = function ElementNode(el) {
      if (this.handledByOverride(el)) {
        return;
      }

      this.OpenElementNode(el);
      this.TopLevelStatements(el.children);
      this.CloseElementNode(el);
    };

    _proto.OpenElementNode = function OpenElementNode(el) {
      this.buffer += "<" + el.tag;
      var parts = [].concat(el.attributes, el.modifiers, el.comments).sort(sortByLoc);

      for (var _iterator = _createForOfIteratorHelperLoose$1(parts), _step; !(_step = _iterator()).done;) {
        var part = _step.value;
        this.buffer += ' ';

        switch (part.type) {
          case 'AttrNode':
            this.AttrNode(part);
            break;

          case 'ElementModifierStatement':
            this.ElementModifierStatement(part);
            break;

          case 'MustacheCommentStatement':
            this.MustacheCommentStatement(part);
            break;
        }
      }

      if (el.blockParams.length) {
        this.BlockParams(el.blockParams);
      }

      if (el.selfClosing) {
        this.buffer += ' /';
      }

      this.buffer += '>';
    };

    _proto.CloseElementNode = function CloseElementNode(el) {
      if (el.selfClosing || voidMap[el.tag.toLowerCase()]) {
        return;
      }

      this.buffer += "</" + el.tag + ">";
    };

    _proto.AttrNode = function AttrNode(attr) {
      if (this.handledByOverride(attr)) {
        return;
      }

      var name = attr.name,
          value = attr.value;
      this.buffer += name;

      if (value.type !== 'TextNode' || value.chars.length > 0) {
        this.buffer += '=';
        this.AttrNodeValue(value);
      }
    };

    _proto.AttrNodeValue = function AttrNodeValue(value) {
      if (value.type === 'TextNode') {
        this.buffer += '"';
        this.TextNode(value, true);
        this.buffer += '"';
      } else {
        this.Node(value);
      }
    };

    _proto.TextNode = function TextNode(text, isAttr) {
      if (this.handledByOverride(text)) {
        return;
      }

      if (this.options.entityEncoding === 'raw') {
        this.buffer += text.chars;
      } else if (isAttr) {
        this.buffer += escapeAttrValue(text.chars);
      } else {
        this.buffer += escapeText(text.chars);
      }
    };

    _proto.MustacheStatement = function MustacheStatement(mustache) {
      if (this.handledByOverride(mustache)) {
        return;
      }

      this.buffer += mustache.escaped ? '{{' : '{{{';

      if (mustache.strip.open) {
        this.buffer += '~';
      }

      this.Expression(mustache.path);
      this.Params(mustache.params);
      this.Hash(mustache.hash);

      if (mustache.strip.close) {
        this.buffer += '~';
      }

      this.buffer += mustache.escaped ? '}}' : '}}}';
    };

    _proto.BlockStatement = function BlockStatement(block) {
      if (this.handledByOverride(block)) {
        return;
      }

      if (block.chained) {
        this.buffer += block.inverseStrip.open ? '{{~' : '{{';
        this.buffer += 'else ';
      } else {
        this.buffer += block.openStrip.open ? '{{~#' : '{{#';
      }

      this.Expression(block.path);
      this.Params(block.params);
      this.Hash(block.hash);

      if (block.program.blockParams.length) {
        this.BlockParams(block.program.blockParams);
      }

      if (block.chained) {
        this.buffer += block.inverseStrip.close ? '~}}' : '}}';
      } else {
        this.buffer += block.openStrip.close ? '~}}' : '}}';
      }

      this.Block(block.program);

      if (block.inverse) {
        if (!block.inverse.chained) {
          this.buffer += block.inverseStrip.open ? '{{~' : '{{';
          this.buffer += 'else';
          this.buffer += block.inverseStrip.close ? '~}}' : '}}';
        }

        this.Block(block.inverse);
      }

      if (!block.chained) {
        this.buffer += block.closeStrip.open ? '{{~/' : '{{/';
        this.Expression(block.path);
        this.buffer += block.closeStrip.close ? '~}}' : '}}';
      }
    };

    _proto.BlockParams = function BlockParams(blockParams) {
      this.buffer += " as |" + blockParams.join(' ') + "|";
    };

    _proto.PartialStatement = function PartialStatement(partial) {
      if (this.handledByOverride(partial)) {
        return;
      }

      this.buffer += '{{>';
      this.Expression(partial.name);
      this.Params(partial.params);
      this.Hash(partial.hash);
      this.buffer += '}}';
    };

    _proto.ConcatStatement = function ConcatStatement(concat) {
      var _this2 = this;

      if (this.handledByOverride(concat)) {
        return;
      }

      this.buffer += '"';
      concat.parts.forEach(function (part) {
        if (part.type === 'TextNode') {
          _this2.TextNode(part, true);
        } else {
          _this2.Node(part);
        }
      });
      this.buffer += '"';
    };

    _proto.MustacheCommentStatement = function MustacheCommentStatement(comment) {
      if (this.handledByOverride(comment)) {
        return;
      }

      this.buffer += "{{!--" + comment.value + "--}}";
    };

    _proto.ElementModifierStatement = function ElementModifierStatement(mod) {
      if (this.handledByOverride(mod)) {
        return;
      }

      this.buffer += '{{';
      this.Expression(mod.path);
      this.Params(mod.params);
      this.Hash(mod.hash);
      this.buffer += '}}';
    };

    _proto.CommentStatement = function CommentStatement(comment) {
      if (this.handledByOverride(comment)) {
        return;
      }

      this.buffer += "<!--" + comment.value + "-->";
    };

    _proto.PathExpression = function PathExpression(path) {
      if (this.handledByOverride(path)) {
        return;
      }

      this.buffer += path.original;
    };

    _proto.SubExpression = function SubExpression(sexp) {
      if (this.handledByOverride(sexp)) {
        return;
      }

      this.buffer += '(';
      this.Expression(sexp.path);
      this.Params(sexp.params);
      this.Hash(sexp.hash);
      this.buffer += ')';
    };

    _proto.Params = function Params(params) {
      var _this3 = this;

      // TODO: implement a top level Params AST node (just like the Hash object)
      // so that this can also be overridden
      if (params.length) {
        params.forEach(function (param) {
          _this3.buffer += ' ';

          _this3.Expression(param);
        });
      }
    };

    _proto.Hash = function Hash(hash) {
      var _this4 = this;

      if (this.handledByOverride(hash, true)) {
        return;
      }

      hash.pairs.forEach(function (pair) {
        _this4.buffer += ' ';

        _this4.HashPair(pair);
      });
    };

    _proto.HashPair = function HashPair(pair) {
      if (this.handledByOverride(pair)) {
        return;
      }

      this.buffer += pair.key;
      this.buffer += '=';
      this.Node(pair.value);
    };

    _proto.StringLiteral = function StringLiteral(str) {
      if (this.handledByOverride(str)) {
        return;
      }

      this.buffer += JSON.stringify(str.value);
    };

    _proto.BooleanLiteral = function BooleanLiteral(bool) {
      if (this.handledByOverride(bool)) {
        return;
      }

      this.buffer += bool.value;
    };

    _proto.NumberLiteral = function NumberLiteral(number) {
      if (this.handledByOverride(number)) {
        return;
      }

      this.buffer += number.value;
    };

    _proto.UndefinedLiteral = function UndefinedLiteral(node) {
      if (this.handledByOverride(node)) {
        return;
      }

      this.buffer += 'undefined';
    };

    _proto.NullLiteral = function NullLiteral(node) {
      if (this.handledByOverride(node)) {
        return;
      }

      this.buffer += 'null';
    };

    _proto.print = function print(node) {
      var options = this.options;

      if (options.override) {
        var result = options.override(node, options);

        if (result !== undefined) {
          return result;
        }
      }

      this.buffer = '';
      this.Node(node);
      return this.buffer;
    };

    return Printer;
  }();

  function build(ast, options) {
    if (options === void 0) {
      options = {
        entityEncoding: 'transformed'
      };
    }

    if (!ast) {
      return '';
    }

    var printer = new Printer(options);
    return printer.print(ast);
  }

  function generateSyntaxError(message, location) {
    var module = location.module,
        loc = location.loc;
    var _loc$start = loc.start,
        line = _loc$start.line,
        column = _loc$start.column;
    var code = location.asString();
    var quotedCode = code ? "\n\n|\n|  " + code.split('\n').join('\n|  ') + "\n|\n\n" : '';
    var error = new Error(message + ": " + quotedCode + "(error occurred in '" + module + "' @ line " + line + " : column " + column + ")");
    error.name = 'SyntaxError';
    error.location = location;
    error.code = code;
    return error;
  }

  // ParentNode and ChildKey types are derived from VisitorKeysMap

  var visitorKeys = {
    Program: util.tuple('body'),
    Template: util.tuple('body'),
    Block: util.tuple('body'),
    MustacheStatement: util.tuple('path', 'params', 'hash'),
    BlockStatement: util.tuple('path', 'params', 'hash', 'program', 'inverse'),
    ElementModifierStatement: util.tuple('path', 'params', 'hash'),
    PartialStatement: util.tuple('name', 'params', 'hash'),
    CommentStatement: util.tuple(),
    MustacheCommentStatement: util.tuple(),
    ElementNode: util.tuple('attributes', 'modifiers', 'children', 'comments'),
    AttrNode: util.tuple('value'),
    TextNode: util.tuple(),
    ConcatStatement: util.tuple('parts'),
    SubExpression: util.tuple('path', 'params', 'hash'),
    PathExpression: util.tuple(),
    PathHead: util.tuple(),
    StringLiteral: util.tuple(),
    BooleanLiteral: util.tuple(),
    NumberLiteral: util.tuple(),
    NullLiteral: util.tuple(),
    UndefinedLiteral: util.tuple(),
    Hash: util.tuple('pairs'),
    HashPair: util.tuple('value'),
    // v2 new nodes
    NamedBlock: util.tuple('attributes', 'modifiers', 'children', 'comments'),
    SimpleElement: util.tuple('attributes', 'modifiers', 'children', 'comments'),
    Component: util.tuple('head', 'attributes', 'modifiers', 'children', 'comments')
  };

  var TraversalError = function () {
    TraversalError.prototype = Object.create(Error.prototype);
    TraversalError.prototype.constructor = TraversalError;

    function TraversalError(message, node, parent, key) {
      var error = Error.call(this, message);
      this.key = key;
      this.message = message;
      this.node = node;
      this.parent = parent;
      this.stack = error.stack;
    }

    return TraversalError;
  }();
  function cannotRemoveNode(node, parent, key) {
    return new TraversalError('Cannot remove a node unless it is part of an array', node, parent, key);
  }
  function cannotReplaceNode(node, parent, key) {
    return new TraversalError('Cannot replace a node with multiple nodes unless it is part of an array', node, parent, key);
  }
  function cannotReplaceOrRemoveInKeyHandlerYet(node, key) {
    return new TraversalError('Replacing and removing in key handlers is not yet supported.', node, null, key);
  }

  function _defineProperties$6(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$6(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$6(Constructor.prototype, protoProps); if (staticProps) _defineProperties$6(Constructor, staticProps); return Constructor; }

  var WalkerPath = /*#__PURE__*/function () {
    function WalkerPath(node, parent, parentKey) {
      if (parent === void 0) {
        parent = null;
      }

      if (parentKey === void 0) {
        parentKey = null;
      }

      this.node = node;
      this.parent = parent;
      this.parentKey = parentKey;
    }

    var _proto = WalkerPath.prototype;

    _proto.parents = function parents() {
      var _this = this,
          _ref;

      return _ref = {}, _ref[Symbol.iterator] = function () {
        return new PathParentsIterator(_this);
      }, _ref;
    };

    _createClass$6(WalkerPath, [{
      key: "parentNode",
      get: function get() {
        return this.parent ? this.parent.node : null;
      }
    }]);

    return WalkerPath;
  }();

  var PathParentsIterator = /*#__PURE__*/function () {
    function PathParentsIterator(path) {
      this.path = path;
    }

    var _proto2 = PathParentsIterator.prototype;

    _proto2.next = function next() {
      if (this.path.parent) {
        this.path = this.path.parent;
        return {
          done: false,
          value: this.path
        };
      } else {
        return {
          done: true,
          value: null
        };
      }
    };

    return PathParentsIterator;
  }();

  function getEnterFunction(handler) {
    if (typeof handler === 'function') {
      return handler;
    } else {
      return handler.enter;
    }
  }

  function getExitFunction(handler) {
    if (typeof handler === 'function') {
      return undefined;
    } else {
      return handler.exit;
    }
  }

  function getKeyHandler(handler, key) {
    var keyVisitor = typeof handler !== 'function' ? handler.keys : undefined;
    if (keyVisitor === undefined) return;
    var keyHandler = keyVisitor[key];

    if (keyHandler !== undefined) {
      return keyHandler;
    }

    return keyVisitor.All;
  }

  function getNodeHandler(visitor, nodeType) {
    if (nodeType === 'Template' || nodeType === 'Block') {
      if (visitor.Program) {

        return visitor.Program;
      }
    }

    var handler = visitor[nodeType];

    if (handler !== undefined) {
      return handler;
    }

    return visitor.All;
  }

  function visitNode(visitor, path) {
    var node = path.node,
        parent = path.parent,
        parentKey = path.parentKey;
    var handler = getNodeHandler(visitor, node.type);
    var enter;
    var exit;

    if (handler !== undefined) {
      enter = getEnterFunction(handler);
      exit = getExitFunction(handler);
    }

    var result;

    if (enter !== undefined) {
      result = enter(node, path);
    }

    if (result !== undefined && result !== null) {
      if (JSON.stringify(node) === JSON.stringify(result)) {
        result = undefined;
      } else if (Array.isArray(result)) {
        visitArray(visitor, result, parent, parentKey);
        return result;
      } else {
        var _path = new WalkerPath(result, parent, parentKey);

        return visitNode(visitor, _path) || result;
      }
    }

    if (result === undefined) {
      var keys = visitorKeys[node.type];

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i]; // we know if it has child keys we can widen to a ParentNode

        visitKey(visitor, handler, path, key);
      }

      if (exit !== undefined) {
        result = exit(node, path);
      }
    }

    return result;
  }

  function get(node, key) {
    return node[key];
  }

  function set(node, key, value) {
    node[key] = value;
  }

  function visitKey(visitor, handler, path, key) {
    var node = path.node;
    var value = get(node, key);

    if (!value) {
      return;
    }

    var keyEnter;
    var keyExit;

    if (handler !== undefined) {
      var keyHandler = getKeyHandler(handler, key);

      if (keyHandler !== undefined) {
        keyEnter = getEnterFunction(keyHandler);
        keyExit = getExitFunction(keyHandler);
      }
    }

    if (keyEnter !== undefined) {
      if (keyEnter(node, key) !== undefined) {
        throw cannotReplaceOrRemoveInKeyHandlerYet(node, key);
      }
    }

    if (Array.isArray(value)) {
      visitArray(visitor, value, path, key);
    } else {
      var keyPath = new WalkerPath(value, path, key);
      var result = visitNode(visitor, keyPath);

      if (result !== undefined) {
        // TODO: dynamically check the results by having a table of
        // expected node types in value space, not just type space
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        assignKey(node, key, value, result);
      }
    }

    if (keyExit !== undefined) {
      if (keyExit(node, key) !== undefined) {
        throw cannotReplaceOrRemoveInKeyHandlerYet(node, key);
      }
    }
  }

  function visitArray(visitor, array, parent, parentKey) {
    for (var i = 0; i < array.length; i++) {
      var node = array[i];
      var path = new WalkerPath(node, parent, parentKey);
      var result = visitNode(visitor, path);

      if (result !== undefined) {
        i += spliceArray(array, i, result) - 1;
      }
    }
  }

  function assignKey(node, key, value, result) {
    if (result === null) {
      throw cannotRemoveNode(value, node, key);
    } else if (Array.isArray(result)) {
      if (result.length === 1) {
        set(node, key, result[0]);
      } else {
        if (result.length === 0) {
          throw cannotRemoveNode(value, node, key);
        } else {
          throw cannotReplaceNode(value, node, key);
        }
      }
    } else {
      set(node, key, result);
    }
  }

  function spliceArray(array, index, result) {
    if (result === null) {
      array.splice(index, 1);
      return 0;
    } else if (Array.isArray(result)) {
      array.splice.apply(array, [index, 1].concat(result));
      return result.length;
    } else {
      array.splice(index, 1, result);
      return 1;
    }
  }

  function traverse(node, visitor) {
    var path = new WalkerPath(node);
    visitNode(visitor, path);
  }

  var Walker = /*#__PURE__*/function () {
    function Walker(order) {
      this.order = order;
      this.stack = [];
    }

    var _proto = Walker.prototype;

    _proto.visit = function visit(node, callback) {
      if (!node) {
        return;
      }

      this.stack.push(node);

      if (this.order === 'post') {
        this.children(node, callback);
        callback(node, this);
      } else {
        callback(node, this);
        this.children(node, callback);
      }

      this.stack.pop();
    };

    _proto.children = function children(node, callback) {
      switch (node.type) {
        case 'Block':
        case 'Template':
          return visitors.Program(this, node, callback);

        case 'ElementNode':
          return visitors.ElementNode(this, node, callback);

        case 'BlockStatement':
          return visitors.BlockStatement(this, node, callback);

        default:
          return;
      }
    };

    return Walker;
  }();
  var visitors = {
    Program: function Program(walker, node, callback) {
      for (var i = 0; i < node.body.length; i++) {
        walker.visit(node.body[i], callback);
      }
    },
    Template: function Template(walker, node, callback) {
      for (var i = 0; i < node.body.length; i++) {
        walker.visit(node.body[i], callback);
      }
    },
    Block: function Block(walker, node, callback) {
      for (var i = 0; i < node.body.length; i++) {
        walker.visit(node.body[i], callback);
      }
    },
    ElementNode: function ElementNode(walker, node, callback) {
      for (var i = 0; i < node.children.length; i++) {
        walker.visit(node.children[i], callback);
      }
    },
    BlockStatement: function BlockStatement(walker, node, callback) {
      walker.visit(node.program, callback);
      walker.visit(node.inverse || null, callback);
    }
  };

  // Based on the ID validation regex in Handlebars.

  var ID_INVERSE_PATTERN = /[!"#%-,\.\/;->@\[-\^`\{-~]/; // Checks the element's attributes to see if it uses block params.
  // If it does, registers the block params with the program and
  // removes the corresponding attributes from the element.

  function parseElementBlockParams(element) {
    var params = parseBlockParams(element);
    if (params) element.blockParams = params;
  }

  function parseBlockParams(element) {
    var l = element.attributes.length;
    var attrNames = [];

    for (var i = 0; i < l; i++) {
      attrNames.push(element.attributes[i].name);
    }

    var asIndex = attrNames.indexOf('as');

    if (asIndex === -1 && attrNames.length > 0 && attrNames[attrNames.length - 1].charAt(0) === '|') {
      throw generateSyntaxError('Block parameters must be preceded by the `as` keyword, detected block parameters without `as`', element.loc);
    }

    if (asIndex !== -1 && l > asIndex && attrNames[asIndex + 1].charAt(0) === '|') {
      // Some basic validation, since we're doing the parsing ourselves
      var paramsString = attrNames.slice(asIndex).join(' ');

      if (paramsString.charAt(paramsString.length - 1) !== '|' || paramsString.match(/\|/g).length !== 2) {
        throw generateSyntaxError("Invalid block parameters syntax, '" + paramsString + "'", element.loc);
      }

      var params = [];

      for (var _i = asIndex + 1; _i < l; _i++) {
        var param = attrNames[_i].replace(/\|/g, '');

        if (param !== '') {
          if (ID_INVERSE_PATTERN.test(param)) {
            throw generateSyntaxError("Invalid identifier for block parameters, '" + param + "'", element.loc);
          }

          params.push(param);
        }
      }

      if (params.length === 0) {
        throw generateSyntaxError('Cannot use zero block parameters', element.loc);
      }

      element.attributes = element.attributes.slice(0, asIndex);
      return params;
    }

    return null;
  }

  function childrenFor(node) {
    switch (node.type) {
      case 'Block':
      case 'Template':
        return node.body;

      case 'ElementNode':
        return node.children;
    }
  }
  function appendChild(parent, node) {
    childrenFor(parent).push(node);
  }
  function isHBSLiteral(path) {
    return path.type === 'StringLiteral' || path.type === 'BooleanLiteral' || path.type === 'NumberLiteral' || path.type === 'NullLiteral' || path.type === 'UndefinedLiteral';
  }
  function printLiteral(literal) {
    if (literal.type === 'UndefinedLiteral') {
      return 'undefined';
    } else {
      return JSON.stringify(literal.value);
    }
  }
  function isUpperCase(tag) {
    return tag[0] === tag[0].toUpperCase() && tag[0] !== tag[0].toLowerCase();
  }
  function isLowerCase(tag) {
    return tag[0] === tag[0].toLowerCase() && tag[0] !== tag[0].toUpperCase();
  }

  var DEFAULT_STRIP = {
    close: false,
    open: false
  };
  /**
   * The Parser Builder differentiates from the public builder API by:
   *
   * 1. Offering fewer different ways to instantiate nodes
   * 2. Mandating source locations
   */

  var Builders = /*#__PURE__*/function () {
    function Builders() {}

    var _proto = Builders.prototype;

    _proto.pos = function pos(line, column) {
      return {
        line: line,
        column: column
      };
    };

    _proto.blockItself = function blockItself(_ref) {
      var body = _ref.body,
          blockParams = _ref.blockParams,
          _ref$chained = _ref.chained,
          chained = _ref$chained === void 0 ? false : _ref$chained,
          loc = _ref.loc;
      return {
        type: 'Block',
        body: body || [],
        blockParams: blockParams || [],
        chained: chained,
        loc: loc
      };
    };

    _proto.template = function template(_ref2) {
      var body = _ref2.body,
          blockParams = _ref2.blockParams,
          loc = _ref2.loc;
      return {
        type: 'Template',
        body: body || [],
        blockParams: blockParams || [],
        loc: loc
      };
    };

    _proto.mustache = function mustache(_ref3) {
      var path = _ref3.path,
          params = _ref3.params,
          hash = _ref3.hash,
          trusting = _ref3.trusting,
          loc = _ref3.loc,
          _ref3$strip = _ref3.strip,
          strip = _ref3$strip === void 0 ? DEFAULT_STRIP : _ref3$strip;
      return {
        type: 'MustacheStatement',
        path: path,
        params: params,
        hash: hash,
        escaped: !trusting,
        trusting: trusting,
        loc: loc,
        strip: strip || {
          open: false,
          close: false
        }
      };
    };

    _proto.block = function block(_ref4) {
      var path = _ref4.path,
          params = _ref4.params,
          hash = _ref4.hash,
          defaultBlock = _ref4.defaultBlock,
          _ref4$elseBlock = _ref4.elseBlock,
          elseBlock = _ref4$elseBlock === void 0 ? null : _ref4$elseBlock,
          loc = _ref4.loc,
          _ref4$openStrip = _ref4.openStrip,
          openStrip = _ref4$openStrip === void 0 ? DEFAULT_STRIP : _ref4$openStrip,
          _ref4$inverseStrip = _ref4.inverseStrip,
          inverseStrip = _ref4$inverseStrip === void 0 ? DEFAULT_STRIP : _ref4$inverseStrip,
          _ref4$closeStrip = _ref4.closeStrip,
          closeStrip = _ref4$closeStrip === void 0 ? DEFAULT_STRIP : _ref4$closeStrip;
      return {
        type: 'BlockStatement',
        path: path,
        params: params,
        hash: hash,
        program: defaultBlock,
        inverse: elseBlock,
        loc: loc,
        openStrip: openStrip,
        inverseStrip: inverseStrip,
        closeStrip: closeStrip
      };
    };

    _proto.comment = function comment(value, loc) {
      return {
        type: 'CommentStatement',
        value: value,
        loc: loc
      };
    };

    _proto.mustacheComment = function mustacheComment(value, loc) {
      return {
        type: 'MustacheCommentStatement',
        value: value,
        loc: loc
      };
    };

    _proto.concat = function concat(parts, loc) {
      return {
        type: 'ConcatStatement',
        parts: parts,
        loc: loc
      };
    };

    _proto.element = function element(_ref5) {
      var tag = _ref5.tag,
          selfClosing = _ref5.selfClosing,
          attrs = _ref5.attrs,
          blockParams = _ref5.blockParams,
          modifiers = _ref5.modifiers,
          comments = _ref5.comments,
          children = _ref5.children,
          loc = _ref5.loc;
      return {
        type: 'ElementNode',
        tag: tag,
        selfClosing: selfClosing,
        attributes: attrs || [],
        blockParams: blockParams || [],
        modifiers: modifiers || [],
        comments: comments || [],
        children: children || [],
        loc: loc
      };
    };

    _proto.elementModifier = function elementModifier(_ref6) {
      var path = _ref6.path,
          params = _ref6.params,
          hash = _ref6.hash,
          loc = _ref6.loc;
      return {
        type: 'ElementModifierStatement',
        path: path,
        params: params,
        hash: hash,
        loc: loc
      };
    };

    _proto.attr = function attr(_ref7) {
      var name = _ref7.name,
          value = _ref7.value,
          loc = _ref7.loc;
      return {
        type: 'AttrNode',
        name: name,
        value: value,
        loc: loc
      };
    };

    _proto.text = function text(_ref8) {
      var chars = _ref8.chars,
          loc = _ref8.loc;
      return {
        type: 'TextNode',
        chars: chars,
        loc: loc
      };
    };

    _proto.sexpr = function sexpr(_ref9) {
      var path = _ref9.path,
          params = _ref9.params,
          hash = _ref9.hash,
          loc = _ref9.loc;
      return {
        type: 'SubExpression',
        path: path,
        params: params,
        hash: hash,
        loc: loc
      };
    };

    _proto.path = function path(_ref10) {
      var head = _ref10.head,
          tail = _ref10.tail,
          loc = _ref10.loc;

      var _headToString = headToString$1(head),
          originalHead = _headToString.original;

      var original = [].concat(originalHead, tail).join('.');
      return new PathExpressionImplV1(original, head, tail, loc);
    };

    _proto.head = function head(_head, loc) {
      if (_head[0] === '@') {
        return this.atName(_head, loc);
      } else if (_head === 'this') {
        return this["this"](loc);
      } else {
        return this["var"](_head, loc);
      }
    };

    _proto["this"] = function _this(loc) {
      return {
        type: 'ThisHead',
        loc: loc
      };
    };

    _proto.atName = function atName(name, loc) {
      return {
        type: 'AtHead',
        name: name,
        loc: loc
      };
    };

    _proto["var"] = function _var(name, loc) {
      return {
        type: 'VarHead',
        name: name,
        loc: loc
      };
    };

    _proto.hash = function hash(pairs, loc) {
      return {
        type: 'Hash',
        pairs: pairs || [],
        loc: loc
      };
    };

    _proto.pair = function pair(_ref11) {
      var key = _ref11.key,
          value = _ref11.value,
          loc = _ref11.loc;
      return {
        type: 'HashPair',
        key: key,
        value: value,
        loc: loc
      };
    };

    _proto.literal = function literal(_ref12) {
      var type = _ref12.type,
          value = _ref12.value,
          loc = _ref12.loc;
      return {
        type: type,
        value: value,
        original: value,
        loc: loc
      };
    };

    _proto.undefined = function (_undefined) {
      function undefined$1() {
        return _undefined.apply(this, arguments);
      }

      undefined$1.toString = function () {
        return _undefined.toString();
      };

      return undefined$1;
    }(function () {
      return this.literal({
        type: 'UndefinedLiteral',
        value: undefined
      });
    });

    _proto["null"] = function _null() {
      return this.literal({
        type: 'NullLiteral',
        value: null
      });
    };

    _proto.string = function string(value, loc) {
      return this.literal({
        type: 'StringLiteral',
        value: value,
        loc: loc
      });
    };

    _proto["boolean"] = function boolean(value, loc) {
      return this.literal({
        type: 'BooleanLiteral',
        value: value,
        loc: loc
      });
    };

    _proto.number = function number(value, loc) {
      return this.literal({
        type: 'NumberLiteral',
        value: value,
        loc: loc
      });
    };

    return Builders;
  }(); // Expressions


  function headToString$1(head) {
    switch (head.type) {
      case 'AtHead':
        return {
          original: head.name,
          parts: [head.name]
        };

      case 'ThisHead':
        return {
          original: "this",
          parts: []
        };

      case 'VarHead':
        return {
          original: head.name,
          parts: [head.name]
        };
    }
  }

  var b = new Builders();

  function _defineProperties$7(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$7(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$7(Constructor.prototype, protoProps); if (staticProps) _defineProperties$7(Constructor, staticProps); return Constructor; }
  var Parser = /*#__PURE__*/function () {
    function Parser(source, entityParser, mode) {
      if (entityParser === void 0) {
        entityParser = new simpleHtmlTokenizer.EntityParser(simpleHtmlTokenizer.HTML5NamedCharRefs);
      }

      if (mode === void 0) {
        mode = 'precompile';
      }

      this.elementStack = [];
      this.currentAttribute = null;
      this.currentNode = null;
      this.source = source;
      this.lines = source.source.split(/(?:\r\n?|\n)/g);
      this.tokenizer = new simpleHtmlTokenizer.EventedTokenizer(this, entityParser, mode);
    }

    var _proto = Parser.prototype;

    _proto.offset = function offset() {
      var _this$tokenizer = this.tokenizer,
          line = _this$tokenizer.line,
          column = _this$tokenizer.column;
      return this.source.offsetFor(line, column);
    };

    _proto.pos = function pos(_ref) {
      var line = _ref.line,
          column = _ref.column;
      return this.source.offsetFor(line, column);
    };

    _proto.finish = function finish(node) {
      return util.assign({}, node, {
        loc: node.loc.until(this.offset())
      }); // node.loc = node.loc.withEnd(end);
    };

    _proto.acceptTemplate = function acceptTemplate(node) {
      return this[node.type](node);
    };

    _proto.acceptNode = function acceptNode(node) {
      return this[node.type](node);
    };

    _proto.currentElement = function currentElement() {
      return this.elementStack[this.elementStack.length - 1];
    };

    _proto.sourceForNode = function sourceForNode(node, endNode) {
      var firstLine = node.loc.start.line - 1;
      var currentLine = firstLine - 1;
      var firstColumn = node.loc.start.column;
      var string = [];
      var line;
      var lastLine;
      var lastColumn;

      if (endNode) {
        lastLine = endNode.loc.end.line - 1;
        lastColumn = endNode.loc.end.column;
      } else {
        lastLine = node.loc.end.line - 1;
        lastColumn = node.loc.end.column;
      }

      while (currentLine < lastLine) {
        currentLine++;
        line = this.lines[currentLine];

        if (currentLine === firstLine) {
          if (firstLine === lastLine) {
            string.push(line.slice(firstColumn, lastColumn));
          } else {
            string.push(line.slice(firstColumn));
          }
        } else if (currentLine === lastLine) {
          string.push(line.slice(0, lastColumn));
        } else {
          string.push(line);
        }
      }

      return string.join('\n');
    };

    _createClass$7(Parser, [{
      key: "currentAttr",
      get: function get() {
        return this.currentAttribute;
      }
    }, {
      key: "currentTag",
      get: function get() {
        var node = this.currentNode;
        return node;
      }
    }, {
      key: "currentStartTag",
      get: function get() {
        var node = this.currentNode;
        return node;
      }
    }, {
      key: "currentEndTag",
      get: function get() {
        var node = this.currentNode;
        return node;
      }
    }, {
      key: "currentComment",
      get: function get() {
        var node = this.currentNode;
        return node;
      }
    }, {
      key: "currentData",
      get: function get() {
        var node = this.currentNode;
        return node;
      }
    }]);

    return Parser;
  }();

  function _defineProperties$8(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$8(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$8(Constructor.prototype, protoProps); if (staticProps) _defineProperties$8(Constructor, staticProps); return Constructor; }

  function _inheritsLoose$6(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
  var HandlebarsNodeVisitors = /*#__PURE__*/function (_Parser) {
    _inheritsLoose$6(HandlebarsNodeVisitors, _Parser);

    function HandlebarsNodeVisitors() {
      return _Parser.apply(this, arguments) || this;
    }

    var _proto = HandlebarsNodeVisitors.prototype;

    _proto.Program = function Program(program) {
      var body = [];
      var node;

      if (this.isTopLevel) {
        node = b.template({
          body: body,
          blockParams: program.blockParams,
          loc: this.source.spanFor(program.loc)
        });
      } else {
        node = b.blockItself({
          body: body,
          blockParams: program.blockParams,
          chained: program.chained,
          loc: this.source.spanFor(program.loc)
        });
      }

      var i,
          l = program.body.length;
      this.elementStack.push(node);

      if (l === 0) {
        return this.elementStack.pop();
      }

      for (i = 0; i < l; i++) {
        this.acceptNode(program.body[i]);
      } // Ensure that that the element stack is balanced properly.


      var poppedNode = this.elementStack.pop();

      if (poppedNode !== node) {
        var elementNode = poppedNode;
        throw generateSyntaxError("Unclosed element `" + elementNode.tag + "`", elementNode.loc);
      }

      return node;
    };

    _proto.BlockStatement = function BlockStatement(block) {
      if (this.tokenizer.state === "comment"
      /* comment */
      ) {
          this.appendToCommentData(this.sourceForNode(block));
          return;
        }

      if (this.tokenizer.state !== "data"
      /* data */
      && this.tokenizer.state !== "beforeData"
      /* beforeData */
      ) {
          throw generateSyntaxError('A block may only be used inside an HTML element or another block.', this.source.spanFor(block.loc));
        }

      var _acceptCallNodes = acceptCallNodes(this, block),
          path = _acceptCallNodes.path,
          params = _acceptCallNodes.params,
          hash = _acceptCallNodes.hash; // These are bugs in Handlebars upstream


      if (!block.program.loc) {
        block.program.loc = NON_EXISTENT_LOCATION;
      }

      if (block.inverse && !block.inverse.loc) {
        block.inverse.loc = NON_EXISTENT_LOCATION;
      }

      var program = this.Program(block.program);
      var inverse = block.inverse ? this.Program(block.inverse) : null;
      var node = b.block({
        path: path,
        params: params,
        hash: hash,
        defaultBlock: program,
        elseBlock: inverse,
        loc: this.source.spanFor(block.loc),
        openStrip: block.openStrip,
        inverseStrip: block.inverseStrip,
        closeStrip: block.closeStrip
      });
      var parentProgram = this.currentElement();
      appendChild(parentProgram, node);
    };

    _proto.MustacheStatement = function MustacheStatement(rawMustache) {
      var tokenizer = this.tokenizer;

      if (tokenizer.state === 'comment') {
        this.appendToCommentData(this.sourceForNode(rawMustache));
        return;
      }

      var mustache;
      var escaped = rawMustache.escaped,
          loc = rawMustache.loc,
          strip = rawMustache.strip;

      if (isHBSLiteral(rawMustache.path)) {
        mustache = b.mustache({
          path: this.acceptNode(rawMustache.path),
          params: [],
          hash: b.hash([], this.source.spanFor(rawMustache.path.loc).collapse('end')),
          trusting: !escaped,
          loc: this.source.spanFor(loc),
          strip: strip
        });
      } else {
        var _acceptCallNodes2 = acceptCallNodes(this, rawMustache),
            path = _acceptCallNodes2.path,
            params = _acceptCallNodes2.params,
            hash = _acceptCallNodes2.hash;

        mustache = b.mustache({
          path: path,
          params: params,
          hash: hash,
          trusting: !escaped,
          loc: this.source.spanFor(loc),
          strip: strip
        });
      }

      switch (tokenizer.state) {
        // Tag helpers
        case "tagOpen"
        /* tagOpen */
        :
        case "tagName"
        /* tagName */
        :
          throw generateSyntaxError("Cannot use mustaches in an elements tagname", mustache.loc);

        case "beforeAttributeName"
        /* beforeAttributeName */
        :
          addElementModifier(this.currentStartTag, mustache);
          break;

        case "attributeName"
        /* attributeName */
        :
        case "afterAttributeName"
        /* afterAttributeName */
        :
          this.beginAttributeValue(false);
          this.finishAttributeValue();
          addElementModifier(this.currentStartTag, mustache);
          tokenizer.transitionTo("beforeAttributeName"
          /* beforeAttributeName */
          );
          break;

        case "afterAttributeValueQuoted"
        /* afterAttributeValueQuoted */
        :
          addElementModifier(this.currentStartTag, mustache);
          tokenizer.transitionTo("beforeAttributeName"
          /* beforeAttributeName */
          );
          break;
        // Attribute values

        case "beforeAttributeValue"
        /* beforeAttributeValue */
        :
          this.beginAttributeValue(false);
          this.appendDynamicAttributeValuePart(mustache);
          tokenizer.transitionTo("attributeValueUnquoted"
          /* attributeValueUnquoted */
          );
          break;

        case "attributeValueDoubleQuoted"
        /* attributeValueDoubleQuoted */
        :
        case "attributeValueSingleQuoted"
        /* attributeValueSingleQuoted */
        :
        case "attributeValueUnquoted"
        /* attributeValueUnquoted */
        :
          this.appendDynamicAttributeValuePart(mustache);
          break;
        // TODO: Only append child when the tokenizer state makes
        // sense to do so, otherwise throw an error.

        default:
          appendChild(this.currentElement(), mustache);
      }

      return mustache;
    };

    _proto.appendDynamicAttributeValuePart = function appendDynamicAttributeValuePart(part) {
      this.finalizeTextPart();
      var attr = this.currentAttr;
      attr.isDynamic = true;
      attr.parts.push(part);
    };

    _proto.finalizeTextPart = function finalizeTextPart() {
      var attr = this.currentAttr;
      var text = attr.currentPart;

      if (text !== null) {
        this.currentAttr.parts.push(text);
        this.startTextPart();
      }
    };

    _proto.startTextPart = function startTextPart() {
      this.currentAttr.currentPart = null;
    };

    _proto.ContentStatement = function ContentStatement(content) {
      updateTokenizerLocation(this.tokenizer, content);
      this.tokenizer.tokenizePart(content.value);
      this.tokenizer.flushData();
    };

    _proto.CommentStatement = function CommentStatement(rawComment) {
      var tokenizer = this.tokenizer;

      if (tokenizer.state === "comment"
      /* comment */
      ) {
          this.appendToCommentData(this.sourceForNode(rawComment));
          return null;
        }

      var value = rawComment.value,
          loc = rawComment.loc;
      var comment = b.mustacheComment(value, this.source.spanFor(loc));

      switch (tokenizer.state) {
        case "beforeAttributeName"
        /* beforeAttributeName */
        :
        case "afterAttributeName"
        /* afterAttributeName */
        :
          this.currentStartTag.comments.push(comment);
          break;

        case "beforeData"
        /* beforeData */
        :
        case "data"
        /* data */
        :
          appendChild(this.currentElement(), comment);
          break;

        default:
          throw generateSyntaxError("Using a Handlebars comment when in the `" + tokenizer['state'] + "` state is not supported", this.source.spanFor(rawComment.loc));
      }

      return comment;
    };

    _proto.PartialStatement = function PartialStatement(partial) {
      throw generateSyntaxError("Handlebars partials are not supported", this.source.spanFor(partial.loc));
    };

    _proto.PartialBlockStatement = function PartialBlockStatement(partialBlock) {
      throw generateSyntaxError("Handlebars partial blocks are not supported", this.source.spanFor(partialBlock.loc));
    };

    _proto.Decorator = function Decorator(decorator) {
      throw generateSyntaxError("Handlebars decorators are not supported", this.source.spanFor(decorator.loc));
    };

    _proto.DecoratorBlock = function DecoratorBlock(decoratorBlock) {
      throw generateSyntaxError("Handlebars decorator blocks are not supported", this.source.spanFor(decoratorBlock.loc));
    };

    _proto.SubExpression = function SubExpression(sexpr) {
      var _acceptCallNodes3 = acceptCallNodes(this, sexpr),
          path = _acceptCallNodes3.path,
          params = _acceptCallNodes3.params,
          hash = _acceptCallNodes3.hash;

      return b.sexpr({
        path: path,
        params: params,
        hash: hash,
        loc: this.source.spanFor(sexpr.loc)
      });
    };

    _proto.PathExpression = function PathExpression(path) {
      var original = path.original;
      var parts;

      if (original.indexOf('/') !== -1) {
        if (original.slice(0, 2) === './') {
          throw generateSyntaxError("Using \"./\" is not supported in Glimmer and unnecessary", this.source.spanFor(path.loc));
        }

        if (original.slice(0, 3) === '../') {
          throw generateSyntaxError("Changing context using \"../\" is not supported in Glimmer", this.source.spanFor(path.loc));
        }

        if (original.indexOf('.') !== -1) {
          throw generateSyntaxError("Mixing '.' and '/' in paths is not supported in Glimmer; use only '.' to separate property paths", this.source.spanFor(path.loc));
        }

        parts = [path.parts.join('/')];
      } else if (original === '.') {
        throw generateSyntaxError("'.' is not a supported path in Glimmer; check for a path with a trailing '.'", this.source.spanFor(path.loc));
      } else {
        parts = path.parts;
      }

      var thisHead = false; // This is to fix a bug in the Handlebars AST where the path expressions in
      // `{{this.foo}}` (and similarly `{{foo-bar this.foo named=this.foo}}` etc)
      // are simply turned into `{{foo}}`. The fix is to push it back onto the
      // parts array and let the runtime see the difference. However, we cannot
      // simply use the string `this` as it means literally the property called
      // "this" in the current context (it can be expressed in the syntax as
      // `{{[this]}}`, where the square bracket are generally for this kind of
      // escaping – such as `{{foo.["bar.baz"]}}` would mean lookup a property
      // named literally "bar.baz" on `this.foo`). By convention, we use `null`
      // for this purpose.

      if (original.match(/^this(\..+)?$/)) {
        thisHead = true;
      }

      var pathHead;

      if (thisHead) {
        pathHead = {
          type: 'ThisHead',
          loc: {
            start: path.loc.start,
            end: {
              line: path.loc.start.line,
              column: path.loc.start.column + 4
            }
          }
        };
      } else if (path.data) {
        var head = parts.shift();

        if (head === undefined) {
          throw generateSyntaxError("Attempted to parse a path expression, but it was not valid. Paths beginning with @ must start with a-z.", this.source.spanFor(path.loc));
        }

        pathHead = {
          type: 'AtHead',
          name: "@" + head,
          loc: {
            start: path.loc.start,
            end: {
              line: path.loc.start.line,
              column: path.loc.start.column + head.length + 1
            }
          }
        };
      } else {
        var _head = parts.shift();

        if (_head === undefined) {
          throw generateSyntaxError("Attempted to parse a path expression, but it was not valid. Paths must start with a-z or A-Z.", this.source.spanFor(path.loc));
        }

        pathHead = {
          type: 'VarHead',
          name: _head,
          loc: {
            start: path.loc.start,
            end: {
              line: path.loc.start.line,
              column: path.loc.start.column + _head.length
            }
          }
        };
      }

      return new PathExpressionImplV1(path.original, pathHead, parts, this.source.spanFor(path.loc));
    };

    _proto.Hash = function Hash(hash) {
      var pairs = [];

      for (var i = 0; i < hash.pairs.length; i++) {
        var pair = hash.pairs[i];
        pairs.push(b.pair({
          key: pair.key,
          value: this.acceptNode(pair.value),
          loc: this.source.spanFor(pair.loc)
        }));
      }

      return b.hash(pairs, this.source.spanFor(hash.loc));
    };

    _proto.StringLiteral = function StringLiteral(string) {
      return b.literal({
        type: 'StringLiteral',
        value: string.value,
        loc: string.loc
      });
    };

    _proto.BooleanLiteral = function BooleanLiteral(_boolean) {
      return b.literal({
        type: 'BooleanLiteral',
        value: _boolean.value,
        loc: _boolean.loc
      });
    };

    _proto.NumberLiteral = function NumberLiteral(number) {
      return b.literal({
        type: 'NumberLiteral',
        value: number.value,
        loc: number.loc
      });
    };

    _proto.UndefinedLiteral = function UndefinedLiteral(undef) {
      return b.literal({
        type: 'UndefinedLiteral',
        value: undefined,
        loc: undef.loc
      });
    };

    _proto.NullLiteral = function NullLiteral(nul) {
      return b.literal({
        type: 'NullLiteral',
        value: null,
        loc: nul.loc
      });
    };

    _createClass$8(HandlebarsNodeVisitors, [{
      key: "isTopLevel",
      get: function get() {
        return this.elementStack.length === 0;
      }
    }]);

    return HandlebarsNodeVisitors;
  }(Parser);

  function calculateRightStrippedOffsets(original, value) {
    if (value === '') {
      // if it is empty, just return the count of newlines
      // in original
      return {
        lines: original.split('\n').length - 1,
        columns: 0
      };
    } // otherwise, return the number of newlines prior to
    // `value`


    var difference = original.split(value)[0];
    var lines = difference.split(/\n/);
    var lineCount = lines.length - 1;
    return {
      lines: lineCount,
      columns: lines[lineCount].length
    };
  }

  function updateTokenizerLocation(tokenizer, content) {
    var line = content.loc.start.line;
    var column = content.loc.start.column;
    var offsets = calculateRightStrippedOffsets(content.original, content.value);
    line = line + offsets.lines;

    if (offsets.lines) {
      column = offsets.columns;
    } else {
      column = column + offsets.columns;
    }

    tokenizer.line = line;
    tokenizer.column = column;
  }

  function acceptCallNodes(compiler, node) {
    var path = node.path.type === 'PathExpression' ? compiler.PathExpression(node.path) : compiler.SubExpression(node.path);
    var params = node.params ? node.params.map(function (e) {
      return compiler.acceptNode(e);
    }) : []; // if there is no hash, position it as a collapsed node immediately after the last param (or the
    // path, if there are also no params)

    var end = params.length > 0 ? params[params.length - 1].loc : path.loc;
    var hash = node.hash ? compiler.Hash(node.hash) : {
      type: 'Hash',
      pairs: [],
      loc: compiler.source.spanFor(end).collapse('end')
    };
    return {
      path: path,
      params: params,
      hash: hash
    };
  }

  function addElementModifier(element, mustache) {
    var path = mustache.path,
        params = mustache.params,
        hash = mustache.hash,
        loc = mustache.loc;

    if (isHBSLiteral(path)) {
      var _modifier = "{{" + printLiteral(path) + "}}";

      var tag = "<" + element.name + " ... " + _modifier + " ...";
      throw generateSyntaxError("In " + tag + ", " + _modifier + " is not a valid modifier", mustache.loc);
    }

    var modifier = b.elementModifier({
      path: path,
      params: params,
      hash: hash,
      loc: loc
    });
    element.modifiers.push(modifier);
  }

  function _inheritsLoose$7(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
  var TokenizerEventHandlers = /*#__PURE__*/function (_HandlebarsNodeVisito) {
    _inheritsLoose$7(TokenizerEventHandlers, _HandlebarsNodeVisito);

    function TokenizerEventHandlers() {
      var _this;

      _this = _HandlebarsNodeVisito.apply(this, arguments) || this;
      _this.tagOpenLine = 0;
      _this.tagOpenColumn = 0;
      return _this;
    }

    var _proto = TokenizerEventHandlers.prototype;

    _proto.reset = function reset() {
      this.currentNode = null;
    } // Comment
    ;

    _proto.beginComment = function beginComment() {
      this.currentNode = b.comment('', this.source.offsetFor(this.tagOpenLine, this.tagOpenColumn));
    };

    _proto.appendToCommentData = function appendToCommentData(_char) {
      this.currentComment.value += _char;
    };

    _proto.finishComment = function finishComment() {
      appendChild(this.currentElement(), this.finish(this.currentComment));
    } // Data
    ;

    _proto.beginData = function beginData() {
      this.currentNode = b.text({
        chars: '',
        loc: this.offset().collapsed()
      });
    };

    _proto.appendToData = function appendToData(_char2) {
      this.currentData.chars += _char2;
    };

    _proto.finishData = function finishData() {
      this.currentData.loc = this.currentData.loc.withEnd(this.offset());
      appendChild(this.currentElement(), this.currentData);
    } // Tags - basic
    ;

    _proto.tagOpen = function tagOpen() {
      this.tagOpenLine = this.tokenizer.line;
      this.tagOpenColumn = this.tokenizer.column;
    };

    _proto.beginStartTag = function beginStartTag() {
      this.currentNode = {
        type: 'StartTag',
        name: '',
        attributes: [],
        modifiers: [],
        comments: [],
        selfClosing: false,
        loc: this.source.offsetFor(this.tagOpenLine, this.tagOpenColumn)
      };
    };

    _proto.beginEndTag = function beginEndTag() {
      this.currentNode = {
        type: 'EndTag',
        name: '',
        attributes: [],
        modifiers: [],
        comments: [],
        selfClosing: false,
        loc: this.source.offsetFor(this.tagOpenLine, this.tagOpenColumn)
      };
    };

    _proto.finishTag = function finishTag() {
      var tag = this.finish(this.currentTag);

      if (tag.type === 'StartTag') {
        this.finishStartTag();

        if (tag.name === ':') {
          throw generateSyntaxError('Invalid named block named detected, you may have created a named block without a name, or you may have began your name with a number. Named blocks must have names that are at least one character long, and begin with a lower case letter', this.source.spanFor({
            start: this.currentTag.loc.toJSON(),
            end: this.offset().toJSON()
          }));
        }

        if (voidMap[tag.name] || tag.selfClosing) {
          this.finishEndTag(true);
        }
      } else if (tag.type === 'EndTag') {
        this.finishEndTag(false);
      }
    };

    _proto.finishStartTag = function finishStartTag() {
      var _this$finish = this.finish(this.currentStartTag),
          name = _this$finish.name,
          attrs = _this$finish.attributes,
          modifiers = _this$finish.modifiers,
          comments = _this$finish.comments,
          selfClosing = _this$finish.selfClosing,
          loc = _this$finish.loc;

      var element = b.element({
        tag: name,
        selfClosing: selfClosing,
        attrs: attrs,
        modifiers: modifiers,
        comments: comments,
        children: [],
        blockParams: [],
        loc: loc
      });
      this.elementStack.push(element);
    };

    _proto.finishEndTag = function finishEndTag(isVoid) {
      var tag = this.finish(this.currentTag);
      var element = this.elementStack.pop();
      var parent = this.currentElement();
      this.validateEndTag(tag, element, isVoid);
      element.loc = element.loc.withEnd(this.offset());
      parseElementBlockParams(element);
      appendChild(parent, element);
    };

    _proto.markTagAsSelfClosing = function markTagAsSelfClosing() {
      this.currentTag.selfClosing = true;
    } // Tags - name
    ;

    _proto.appendToTagName = function appendToTagName(_char3) {
      this.currentTag.name += _char3;
    } // Tags - attributes
    ;

    _proto.beginAttribute = function beginAttribute() {
      var offset = this.offset();
      this.currentAttribute = {
        name: '',
        parts: [],
        currentPart: null,
        isQuoted: false,
        isDynamic: false,
        start: offset,
        valueSpan: offset.collapsed()
      };
    };

    _proto.appendToAttributeName = function appendToAttributeName(_char4) {
      this.currentAttr.name += _char4;
    };

    _proto.beginAttributeValue = function beginAttributeValue(isQuoted) {
      this.currentAttr.isQuoted = isQuoted;
      this.startTextPart();
      this.currentAttr.valueSpan = this.offset().collapsed();
    };

    _proto.appendToAttributeValue = function appendToAttributeValue(_char5) {
      var parts = this.currentAttr.parts;
      var lastPart = parts[parts.length - 1];
      var current = this.currentAttr.currentPart;

      if (current) {
        current.chars += _char5; // update end location for each added char

        current.loc = current.loc.withEnd(this.offset());
      } else {
        // initially assume the text node is a single char
        var loc = this.offset(); // the tokenizer line/column have already been advanced, correct location info

        if (_char5 === '\n') {
          loc = lastPart ? lastPart.loc.getEnd() : this.currentAttr.valueSpan.getStart();
        } else {
          loc = loc.move(-1);
        }

        this.currentAttr.currentPart = b.text({
          chars: _char5,
          loc: loc.collapsed()
        });
      }
    };

    _proto.finishAttributeValue = function finishAttributeValue() {
      this.finalizeTextPart();
      var tag = this.currentTag;
      var tokenizerPos = this.offset();

      if (tag.type === 'EndTag') {
        throw generateSyntaxError("Invalid end tag: closing tag must not have attributes", this.source.spanFor({
          start: tag.loc.toJSON(),
          end: tokenizerPos.toJSON()
        }));
      }

      var _this$currentAttr = this.currentAttr,
          name = _this$currentAttr.name,
          parts = _this$currentAttr.parts,
          start = _this$currentAttr.start,
          isQuoted = _this$currentAttr.isQuoted,
          isDynamic = _this$currentAttr.isDynamic,
          valueSpan = _this$currentAttr.valueSpan;
      var value = this.assembleAttributeValue(parts, isQuoted, isDynamic, start.until(tokenizerPos));
      value.loc = valueSpan.withEnd(tokenizerPos);
      var attribute = b.attr({
        name: name,
        value: value,
        loc: start.until(tokenizerPos)
      });
      this.currentStartTag.attributes.push(attribute);
    };

    _proto.reportSyntaxError = function reportSyntaxError(message) {
      throw generateSyntaxError(message, this.offset().collapsed());
    };

    _proto.assembleConcatenatedValue = function assembleConcatenatedValue(parts) {
      for (var i = 0; i < parts.length; i++) {
        var part = parts[i];

        if (part.type !== 'MustacheStatement' && part.type !== 'TextNode') {
          throw generateSyntaxError('Unsupported node in quoted attribute value: ' + part['type'], part.loc);
        }
      }

      util.assertPresent(parts, "the concatenation parts of an element should not be empty");
      var first = parts[0];
      var last = parts[parts.length - 1];
      return b.concat(parts, this.source.spanFor(first.loc).extend(this.source.spanFor(last.loc)));
    };

    _proto.validateEndTag = function validateEndTag(tag, element, selfClosing) {
      var error;

      if (voidMap[tag.name] && !selfClosing) {
        // EngTag is also called by StartTag for void and self-closing tags (i.e.
        // <input> or <br />, so we need to check for that here. Otherwise, we would
        // throw an error for those cases.
        error = "<" + tag.name + "> elements do not need end tags. You should remove it";
      } else if (element.tag === undefined) {
        error = "Closing tag </" + tag.name + "> without an open tag";
      } else if (element.tag !== tag.name) {
        error = "Closing tag </" + tag.name + "> did not match last open tag <" + element.tag + "> (on line " + element.loc.startPosition.line + ")";
      }

      if (error) {
        throw generateSyntaxError(error, tag.loc);
      }
    };

    _proto.assembleAttributeValue = function assembleAttributeValue(parts, isQuoted, isDynamic, span) {
      if (isDynamic) {
        if (isQuoted) {
          return this.assembleConcatenatedValue(parts);
        } else {
          if (parts.length === 1 || parts.length === 2 && parts[1].type === 'TextNode' && parts[1].chars === '/') {
            return parts[0];
          } else {
            throw generateSyntaxError("An unquoted attribute value must be a string or a mustache, " + "preceded by whitespace or a '=' character, and " + "followed by whitespace, a '>' character, or '/>'", span);
          }
        }
      } else {
        return parts.length > 0 ? parts[0] : b.text({
          chars: '',
          loc: span
        });
      }
    };

    return TokenizerEventHandlers;
  }(HandlebarsNodeVisitors);
  var syntax = {
    parse: preprocess,
    builders: publicBuilder,
    print: build,
    traverse: traverse,
    Walker: Walker
  };

  var CodemodEntityParser = /*#__PURE__*/function (_EntityParser) {
    _inheritsLoose$7(CodemodEntityParser, _EntityParser);

    // match upstream types, but never match an entity
    function CodemodEntityParser() {
      return _EntityParser.call(this, {}) || this;
    }

    var _proto2 = CodemodEntityParser.prototype;

    _proto2.parse = function parse() {
      return undefined;
    };

    return CodemodEntityParser;
  }(simpleHtmlTokenizer.EntityParser);

  function preprocess(input, options) {
    if (options === void 0) {
      options = {};
    }

    var _a, _b, _c;

    var mode = options.mode || 'precompile';
    var source;
    var ast;

    if (typeof input === 'string') {
      source = new Source(input, (_a = options.meta) === null || _a === void 0 ? void 0 : _a.moduleName);

      if (mode === 'codemod') {
        ast = parser.parseWithoutProcessing(input, options.parseOptions);
      } else {
        ast = parser.parse(input, options.parseOptions);
      }
    } else if (input instanceof Source) {
      source = input;

      if (mode === 'codemod') {
        ast = parser.parseWithoutProcessing(input.source, options.parseOptions);
      } else {
        ast = parser.parse(input.source, options.parseOptions);
      }
    } else {
      source = new Source('', (_b = options.meta) === null || _b === void 0 ? void 0 : _b.moduleName);
      ast = input;
    }

    var entityParser = undefined;

    if (mode === 'codemod') {
      entityParser = new CodemodEntityParser();
    }

    var offsets = SourceSpan.forCharPositions(source, 0, source.source.length);
    ast.loc = {
      source: '(program)',
      start: offsets.startPosition,
      end: offsets.endPosition
    };
    var program = new TokenizerEventHandlers(source, entityParser, mode).acceptTemplate(ast);

    if (options.strictMode) {
      program.blockParams = (_c = options.locals) !== null && _c !== void 0 ? _c : [];
    }

    if (options && options.plugins && options.plugins.ast) {
      for (var i = 0, l = options.plugins.ast.length; i < l; i++) {
        var transform = options.plugins.ast[i];
        var env = util.assign({}, options, {
          syntax: syntax
        }, {
          plugins: undefined
        });
        var pluginResult = transform(env);
        traverse(program, pluginResult.visitor);
      }
    }

    return program;
  }

  function _defineProperties$9(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$9(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$9(Constructor.prototype, protoProps); if (staticProps) _defineProperties$9(Constructor, staticProps); return Constructor; }

  function _inheritsLoose$8(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
  var SymbolTable = /*#__PURE__*/function () {
    function SymbolTable() {}

    SymbolTable.top = function top(locals, customizeComponentName) {
      return new ProgramSymbolTable(locals, customizeComponentName);
    };

    var _proto = SymbolTable.prototype;

    _proto.child = function child(locals) {
      var _this = this;

      var symbols = locals.map(function (name) {
        return _this.allocate(name);
      });
      return new BlockSymbolTable(this, locals, symbols);
    };

    return SymbolTable;
  }();
  var ProgramSymbolTable = /*#__PURE__*/function (_SymbolTable) {
    _inheritsLoose$8(ProgramSymbolTable, _SymbolTable);

    function ProgramSymbolTable(templateLocals, customizeComponentName) {
      var _this2;

      _this2 = _SymbolTable.call(this) || this;
      _this2.templateLocals = templateLocals;
      _this2.customizeComponentName = customizeComponentName;
      _this2.symbols = [];
      _this2.upvars = [];
      _this2.size = 1;
      _this2.named = util.dict();
      _this2.blocks = util.dict();
      _this2.usedTemplateLocals = [];
      _this2._hasEval = false;
      return _this2;
    }

    var _proto2 = ProgramSymbolTable.prototype;

    _proto2.getUsedTemplateLocals = function getUsedTemplateLocals() {
      return this.usedTemplateLocals;
    };

    _proto2.setHasEval = function setHasEval() {
      this._hasEval = true;
    };

    _proto2.has = function has(name) {
      return this.templateLocals.indexOf(name) !== -1;
    };

    _proto2.get = function get(name) {
      var index = this.usedTemplateLocals.indexOf(name);

      if (index !== -1) {
        return [index, true];
      }

      index = this.usedTemplateLocals.length;
      this.usedTemplateLocals.push(name);
      return [index, true];
    };

    _proto2.getLocalsMap = function getLocalsMap() {
      return util.dict();
    };

    _proto2.getEvalInfo = function getEvalInfo() {
      var locals = this.getLocalsMap();
      return Object.keys(locals).map(function (symbol) {
        return locals[symbol];
      });
    };

    _proto2.allocateFree = function allocateFree(name, resolution) {
      // If the name in question is an uppercase (i.e. angle-bracket) component invocation, run
      // the optional `customizeComponentName` function provided to the precompiler.
      if (resolution.resolution() === 39
      /* GetFreeAsComponentHead */
      && resolution.isAngleBracket && isUpperCase(name)) {
        name = this.customizeComponentName(name);
      }

      var index = this.upvars.indexOf(name);

      if (index !== -1) {
        return index;
      }

      index = this.upvars.length;
      this.upvars.push(name);
      return index;
    };

    _proto2.allocateNamed = function allocateNamed(name) {
      var named = this.named[name];

      if (!named) {
        named = this.named[name] = this.allocate(name);
      }

      return named;
    };

    _proto2.allocateBlock = function allocateBlock(name) {
      if (name === 'inverse') {
        name = 'else';
      }

      var block = this.blocks[name];

      if (!block) {
        block = this.blocks[name] = this.allocate("&" + name);
      }

      return block;
    };

    _proto2.allocate = function allocate(identifier) {
      this.symbols.push(identifier);
      return this.size++;
    };

    _createClass$9(ProgramSymbolTable, [{
      key: "hasEval",
      get: function get() {
        return this._hasEval;
      }
    }]);

    return ProgramSymbolTable;
  }(SymbolTable);
  var BlockSymbolTable = /*#__PURE__*/function (_SymbolTable2) {
    _inheritsLoose$8(BlockSymbolTable, _SymbolTable2);

    function BlockSymbolTable(parent, symbols, slots) {
      var _this3;

      _this3 = _SymbolTable2.call(this) || this;
      _this3.parent = parent;
      _this3.symbols = symbols;
      _this3.slots = slots;
      return _this3;
    }

    var _proto3 = BlockSymbolTable.prototype;

    _proto3.has = function has(name) {
      return this.symbols.indexOf(name) !== -1 || this.parent.has(name);
    };

    _proto3.get = function get(name) {
      var slot = this.symbols.indexOf(name);
      return slot === -1 ? this.parent.get(name) : [this.slots[slot], false];
    };

    _proto3.getLocalsMap = function getLocalsMap() {
      var _this4 = this;

      var dict = this.parent.getLocalsMap();
      this.symbols.forEach(function (symbol) {
        return dict[symbol] = _this4.get(symbol)[0];
      });
      return dict;
    };

    _proto3.getEvalInfo = function getEvalInfo() {
      var locals = this.getLocalsMap();
      return Object.keys(locals).map(function (symbol) {
        return locals[symbol];
      });
    };

    _proto3.setHasEval = function setHasEval() {
      this.parent.setHasEval();
    };

    _proto3.allocateFree = function allocateFree(name, resolution) {
      return this.parent.allocateFree(name, resolution);
    };

    _proto3.allocateNamed = function allocateNamed(name) {
      return this.parent.allocateNamed(name);
    };

    _proto3.allocateBlock = function allocateBlock(name) {
      return this.parent.allocateBlock(name);
    };

    _proto3.allocate = function allocate(identifier) {
      return this.parent.allocate(identifier);
    };

    _createClass$9(BlockSymbolTable, [{
      key: "locals",
      get: function get() {
        return this.symbols;
      }
    }]);

    return BlockSymbolTable;
  }(SymbolTable);

  var __rest = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  var Builder = /*#__PURE__*/function () {
    function Builder() {}

    var _proto = Builder.prototype;

    // TEMPLATE //
    _proto.template = function template(symbols, body, loc) {
      return new Template({
        table: symbols,
        body: body,
        loc: loc
      });
    } // INTERNAL (these nodes cannot be reached when doing general-purpose visiting) //
    ;

    _proto.block = function block(symbols, body, loc) {
      return new Block({
        scope: symbols,
        body: body,
        loc: loc
      });
    };

    _proto.namedBlock = function namedBlock(name, block, loc) {
      return new NamedBlock({
        name: name,
        block: block,
        attrs: [],
        componentArgs: [],
        modifiers: [],
        loc: loc
      });
    };

    _proto.simpleNamedBlock = function simpleNamedBlock(name, block, loc) {
      return new BuildElement({
        selfClosing: false,
        attrs: [],
        componentArgs: [],
        modifiers: [],
        comments: []
      }).named(name, block, loc);
    };

    _proto.slice = function slice(chars, loc) {
      return new SourceSlice({
        loc: loc,
        chars: chars
      });
    };

    _proto.args = function args(positional, named, loc) {
      return new Args({
        loc: loc,
        positional: positional,
        named: named
      });
    };

    _proto.positional = function positional(exprs, loc) {
      return new PositionalArguments({
        loc: loc,
        exprs: exprs
      });
    };

    _proto.namedArgument = function namedArgument(key, value) {
      return new NamedArgument({
        name: key,
        value: value
      });
    };

    _proto.named = function named(entries, loc) {
      return new NamedArguments({
        loc: loc,
        entries: entries
      });
    };

    _proto.attr = function attr(_ref, loc) {
      var name = _ref.name,
          value = _ref.value,
          trusting = _ref.trusting;
      return new HtmlAttr({
        loc: loc,
        name: name,
        value: value,
        trusting: trusting
      });
    };

    _proto.splatAttr = function splatAttr(symbol, loc) {
      return new SplatAttr({
        symbol: symbol,
        loc: loc
      });
    };

    _proto.arg = function arg(_ref2, loc) {
      var name = _ref2.name,
          value = _ref2.value,
          trusting = _ref2.trusting;
      return new ComponentArg({
        name: name,
        value: value,
        trusting: trusting,
        loc: loc
      });
    } // EXPRESSIONS //
    ;

    _proto.path = function path(head, tail, loc) {
      return new PathExpression({
        loc: loc,
        ref: head,
        tail: tail
      });
    };

    _proto.self = function self(loc) {
      return new ThisReference({
        loc: loc
      });
    };

    _proto.at = function at(name, symbol, loc) {
      return new ArgReference({
        loc: loc,
        name: new SourceSlice({
          loc: loc,
          chars: name
        }),
        symbol: symbol
      });
    };

    _proto.freeVar = function freeVar(_ref3) {
      var name = _ref3.name,
          context = _ref3.context,
          symbol = _ref3.symbol,
          loc = _ref3.loc;
      return new FreeVarReference({
        name: name,
        resolution: context,
        symbol: symbol,
        loc: loc
      });
    };

    _proto.localVar = function localVar(name, symbol, isTemplateLocal, loc) {
      return new LocalVarReference({
        loc: loc,
        name: name,
        isTemplateLocal: isTemplateLocal,
        symbol: symbol
      });
    };

    _proto.sexp = function sexp(parts, loc) {
      return new CallExpression({
        loc: loc,
        callee: parts.callee,
        args: parts.args
      });
    };

    _proto.deprecatedCall = function deprecatedCall(arg, callee, loc) {
      return new DeprecatedCallExpression({
        loc: loc,
        arg: arg,
        callee: callee
      });
    };

    _proto.interpolate = function interpolate(parts, loc) {
      util.assertPresent(parts);
      return new InterpolateExpression({
        loc: loc,
        parts: parts
      });
    };

    _proto.literal = function literal(value, loc) {
      return new LiteralExpression({
        loc: loc,
        value: value
      });
    } // STATEMENTS //
    ;

    _proto.append = function append(_ref4, loc) {
      var table = _ref4.table,
          trusting = _ref4.trusting,
          value = _ref4.value;
      return new AppendContent({
        table: table,
        trusting: trusting,
        value: value,
        loc: loc
      });
    };

    _proto.modifier = function modifier(_ref5, loc) {
      var callee = _ref5.callee,
          args = _ref5.args;
      return new ElementModifier({
        loc: loc,
        callee: callee,
        args: args
      });
    };

    _proto.namedBlocks = function namedBlocks(blocks, loc) {
      return new NamedBlocks({
        loc: loc,
        blocks: blocks
      });
    };

    _proto.blockStatement = function blockStatement(_a, loc) {
      var symbols = _a.symbols,
          program = _a.program,
          _a$inverse = _a.inverse,
          inverse = _a$inverse === void 0 ? null : _a$inverse,
          call = __rest(_a, ["symbols", "program", "inverse"]);

      var blocksLoc = program.loc;
      var blocks = [this.namedBlock(SourceSlice.synthetic('default'), program, program.loc)];

      if (inverse) {
        blocksLoc = blocksLoc.extend(inverse.loc);
        blocks.push(this.namedBlock(SourceSlice.synthetic('else'), inverse, inverse.loc));
      }

      return new InvokeBlock({
        loc: loc,
        blocks: this.namedBlocks(blocks, blocksLoc),
        callee: call.callee,
        args: call.args
      });
    };

    _proto.element = function element(options) {
      return new BuildElement(options);
    };

    return Builder;
  }();
  var BuildElement = /*#__PURE__*/function () {
    function BuildElement(base) {
      this.base = base;
      this.builder = new Builder();
    }

    var _proto2 = BuildElement.prototype;

    _proto2.simple = function simple(tag, body, loc) {
      return new SimpleElement(util.assign({
        tag: tag,
        body: body,
        componentArgs: [],
        loc: loc
      }, this.base));
    };

    _proto2.named = function named(name, block, loc) {
      return new NamedBlock(util.assign({
        name: name,
        block: block,
        componentArgs: [],
        loc: loc
      }, this.base));
    };

    _proto2.selfClosingComponent = function selfClosingComponent(callee, loc) {
      return new InvokeComponent(util.assign({
        loc: loc,
        callee: callee,
        // point the empty named blocks at the `/` self-closing tag
        blocks: new NamedBlocks({
          blocks: [],
          loc: loc.sliceEndChars({
            skipEnd: 1,
            chars: 1
          })
        })
      }, this.base));
    };

    _proto2.componentWithDefaultBlock = function componentWithDefaultBlock(callee, children, symbols, loc) {
      var block = this.builder.block(symbols, children, loc);
      var namedBlock = this.builder.namedBlock(SourceSlice.synthetic('default'), block, loc); // BUILDER.simpleNamedBlock('default', children, symbols, loc);

      return new InvokeComponent(util.assign({
        loc: loc,
        callee: callee,
        blocks: this.builder.namedBlocks([namedBlock], namedBlock.loc)
      }, this.base));
    };

    _proto2.componentWithNamedBlocks = function componentWithNamedBlocks(callee, blocks, loc) {
      return new InvokeComponent(util.assign({
        loc: loc,
        callee: callee,
        blocks: this.builder.namedBlocks(blocks, SpanList.range(blocks))
      }, this.base));
    };

    return BuildElement;
  }();

  function SexpSyntaxContext(node) {
    if (isSimpleCallee(node)) {
      return LooseModeResolution.namespaced("Helper"
      /* Helper */
      );
    } else {
      return null;
    }
  }
  function ModifierSyntaxContext(node) {
    if (isSimpleCallee(node)) {
      return LooseModeResolution.namespaced("Modifier"
      /* Modifier */
      );
    } else {
      return null;
    }
  }
  function BlockSyntaxContext(node) {
    if (isSimpleCallee(node)) {
      return LooseModeResolution.namespaced("Component"
      /* Component */
      );
    } else {
      return LooseModeResolution.fallback();
    }
  }
  function ComponentSyntaxContext(node) {
    if (isSimplePath(node)) {
      return LooseModeResolution.namespaced("Component"
      /* Component */
      , true);
    } else {
      return null;
    }
  }
  /**
   * This corresponds to append positions (text curlies or attribute
   * curlies). In strict mode, this also corresponds to arg curlies.
   */

  function AttrValueSyntaxContext(node) {
    var isSimple = isSimpleCallee(node);
    var isInvoke = isInvokeNode(node);

    if (isSimple) {
      return isInvoke ? LooseModeResolution.namespaced("Helper"
      /* Helper */
      ) : LooseModeResolution.attr();
    } else {
      return isInvoke ? STRICT_RESOLUTION : LooseModeResolution.fallback();
    }
  }
  /**
   * This corresponds to append positions (text curlies or attribute
   * curlies). In strict mode, this also corresponds to arg curlies.
   */

  function AppendSyntaxContext(node) {
    var isSimple = isSimpleCallee(node);
    var isInvoke = isInvokeNode(node);
    var trusting = node.trusting;

    if (isSimple) {
      return trusting ? LooseModeResolution.trustingAppend({
        invoke: isInvoke
      }) : LooseModeResolution.append({
        invoke: isInvoke
      });
    } else {
      return LooseModeResolution.fallback();
    }
  } // UTILITIES

  /**
   * A call node has a simple callee if its head is:
   *
   * - a `PathExpression`
   * - the `PathExpression`'s head is a `VarHead`
   * - it has no tail
   *
   * Simple heads:
   *
   * ```
   * {{x}}
   * {{x y}}
   * ```
   *
   * Not simple heads:
   *
   * ```
   * {{x.y}}
   * {{x.y z}}
   * {{@x}}
   * {{@x a}}
   * {{this}}
   * {{this a}}
   * ```
   */

  function isSimpleCallee(node) {
    var path = node.path;
    return isSimplePath(path);
  }

  function isSimplePath(node) {
    if (node.type === 'PathExpression' && node.head.type === 'VarHead') {
      return node.tail.length === 0;
    } else {
      return false;
    }
  }
  /**
   * The call expression has at least one argument.
   */


  function isInvokeNode(node) {
    return node.params.length > 0 || node.hash.pairs.length > 0;
  }

  function _inheritsLoose$9(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

  function _createForOfIteratorHelperLoose$2(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

  function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }

  function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _defineProperties$a(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$a(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$a(Constructor.prototype, protoProps); if (staticProps) _defineProperties$a(Constructor, staticProps); return Constructor; }
  function normalize(source, options) {
    if (options === void 0) {
      options = {};
    }

    var _a;

    var ast = preprocess(source, options);
    var normalizeOptions = util.assign({
      strictMode: false,
      locals: []
    }, options);
    var top = SymbolTable.top(normalizeOptions.locals, (_a = // eslint-disable-next-line @typescript-eslint/unbound-method
    options.customizeComponentName) !== null && _a !== void 0 ? _a : function (name) {
      return name;
    });
    var block = new BlockContext(source, normalizeOptions, top);
    var normalizer = new StatementNormalizer(block);
    var astV2 = new TemplateChildren(block.loc(ast.loc), ast.body.map(function (b) {
      return normalizer.normalize(b);
    }), block).assertTemplate(top);
    var locals = top.getUsedTemplateLocals();
    return [astV2, locals];
  }
  /**
   * A `BlockContext` represents the block that a particular AST node is contained inside of.
   *
   * `BlockContext` is aware of template-wide options (such as strict mode), as well as the bindings
   * that are in-scope within that block.
   *
   * Concretely, it has the `PrecompileOptions` and current `SymbolTable`, and provides
   * facilities for working with those options.
   *
   * `BlockContext` is stateless.
   */

  var BlockContext = /*#__PURE__*/function () {
    function BlockContext(source, options, table) {
      this.source = source;
      this.options = options;
      this.table = table;
      this.builder = new Builder();
    }

    var _proto = BlockContext.prototype;

    _proto.loc = function loc(_loc) {
      return this.source.spanFor(_loc);
    };

    _proto.resolutionFor = function resolutionFor(node, resolution) {
      if (this.strict) {
        return {
          resolution: STRICT_RESOLUTION
        };
      }

      if (this.isFreeVar(node)) {
        var r = resolution(node);

        if (r === null) {
          return {
            resolution: 'error',
            path: printPath(node),
            head: printHead(node)
          };
        }

        return {
          resolution: r
        };
      } else {
        return {
          resolution: STRICT_RESOLUTION
        };
      }
    };

    _proto.isFreeVar = function isFreeVar(callee) {
      if (callee.type === 'PathExpression') {
        if (callee.head.type !== 'VarHead') {
          return false;
        }

        return !this.table.has(callee.head.name);
      } else if (callee.path.type === 'PathExpression') {
        return this.isFreeVar(callee.path);
      } else {
        return false;
      }
    };

    _proto.hasBinding = function hasBinding(name) {
      return this.table.has(name);
    };

    _proto.child = function child(blockParams) {
      return new BlockContext(this.source, this.options, this.table.child(blockParams));
    };

    _proto.customizeComponentName = function customizeComponentName(input) {
      if (this.options.customizeComponentName) {
        return this.options.customizeComponentName(input);
      } else {
        return input;
      }
    };

    _createClass$a(BlockContext, [{
      key: "strict",
      get: function get() {
        return this.options.strictMode || false;
      }
    }]);

    return BlockContext;
  }();
  /**
   * An `ExpressionNormalizer` normalizes expressions within a block.
   *
   * `ExpressionNormalizer` is stateless.
   */

  var ExpressionNormalizer = /*#__PURE__*/function () {
    function ExpressionNormalizer(block) {
      this.block = block;
    }

    var _proto2 = ExpressionNormalizer.prototype;

    _proto2.normalize = function normalize(expr, resolution) {
      switch (expr.type) {
        case 'NullLiteral':
        case 'BooleanLiteral':
        case 'NumberLiteral':
        case 'StringLiteral':
        case 'UndefinedLiteral':
          return this.block.builder.literal(expr.value, this.block.loc(expr.loc));

        case 'PathExpression':
          return this.path(expr, resolution);

        case 'SubExpression':
          {
            var _resolution = this.block.resolutionFor(expr, SexpSyntaxContext);

            if (_resolution.resolution === 'error') {
              throw generateSyntaxError("You attempted to invoke a path (`" + _resolution.path + "`) but " + _resolution.head + " was not in scope", expr.loc);
            }

            return this.block.builder.sexp(this.callParts(expr, _resolution.resolution), this.block.loc(expr.loc));
          }
      }
    };

    _proto2.path = function path(expr, resolution) {
      var headOffsets = this.block.loc(expr.head.loc);
      var tail = []; // start with the head

      var offset = headOffsets;

      for (var _iterator = _createForOfIteratorHelperLoose$2(expr.tail), _step; !(_step = _iterator()).done;) {
        var part = _step.value;
        offset = offset.sliceStartChars({
          chars: part.length,
          skipStart: 1
        });
        tail.push(new SourceSlice({
          loc: offset,
          chars: part
        }));
      }

      return this.block.builder.path(this.ref(expr.head, resolution), tail, this.block.loc(expr.loc));
    }
    /**
     * The `callParts` method takes ASTv1.CallParts as well as a syntax context and normalizes
     * it to an ASTv2 CallParts.
     */
    ;

    _proto2.callParts = function callParts(parts, context) {
      var _this = this;

      var path = parts.path,
          params = parts.params,
          hash = parts.hash;
      var callee = this.normalize(path, context);
      var paramList = params.map(function (p) {
        return _this.normalize(p, ARGUMENT_RESOLUTION);
      });
      var paramLoc = SpanList.range(paramList, callee.loc.collapse('end'));
      var namedLoc = this.block.loc(hash.loc);
      var argsLoc = SpanList.range([paramLoc, namedLoc]);
      var positional = this.block.builder.positional(params.map(function (p) {
        return _this.normalize(p, ARGUMENT_RESOLUTION);
      }), paramLoc);
      var named = this.block.builder.named(hash.pairs.map(function (p) {
        return _this.namedArgument(p);
      }), this.block.loc(hash.loc));
      return {
        callee: callee,
        args: this.block.builder.args(positional, named, argsLoc)
      };
    };

    _proto2.namedArgument = function namedArgument(pair) {
      var offsets = this.block.loc(pair.loc);
      var keyOffsets = offsets.sliceStartChars({
        chars: pair.key.length
      });
      return this.block.builder.namedArgument(new SourceSlice({
        chars: pair.key,
        loc: keyOffsets
      }), this.normalize(pair.value, ARGUMENT_RESOLUTION));
    }
    /**
     * The `ref` method normalizes an `ASTv1.PathHead` into an `ASTv2.VariableReference`.
     * This method is extremely important, because it is responsible for normalizing free
     * variables into an an ASTv2.PathHead *with appropriate context*.
     *
     * The syntax context is originally determined by the syntactic position that this `PathHead`
     * came from, and is ultimately attached to the `ASTv2.VariableReference` here. In ASTv2,
     * the `VariableReference` node bears full responsibility for loose mode rules that control
     * the behavior of free variables.
     */
    ;

    _proto2.ref = function ref(head, resolution) {
      var block = this.block;
      var builder = block.builder,
          table = block.table;
      var offsets = block.loc(head.loc);

      switch (head.type) {
        case 'ThisHead':
          return builder.self(offsets);

        case 'AtHead':
          {
            var symbol = table.allocateNamed(head.name);
            return builder.at(head.name, symbol, offsets);
          }

        case 'VarHead':
          {
            if (block.hasBinding(head.name)) {
              var _table$get = table.get(head.name),
                  _symbol = _table$get[0],
                  isRoot = _table$get[1];

              return block.builder.localVar(head.name, _symbol, isRoot, offsets);
            } else {
              var context = block.strict ? STRICT_RESOLUTION : resolution;

              var _symbol2 = block.table.allocateFree(head.name, context);

              return block.builder.freeVar({
                name: head.name,
                context: context,
                symbol: _symbol2,
                loc: offsets
              });
            }
          }
      }
    };

    return ExpressionNormalizer;
  }();
  /**
   * `TemplateNormalizer` normalizes top-level ASTv1 statements to ASTv2.
   */


  var StatementNormalizer = /*#__PURE__*/function () {
    function StatementNormalizer(block) {
      this.block = block;
    }

    var _proto3 = StatementNormalizer.prototype;

    _proto3.normalize = function normalize(node) {
      switch (node.type) {
        case 'PartialStatement':
          throw new Error("Handlebars partial syntax ({{> ...}}) is not allowed in Glimmer");

        case 'BlockStatement':
          return this.BlockStatement(node);

        case 'ElementNode':
          return new ElementNormalizer(this.block).ElementNode(node);

        case 'MustacheStatement':
          return this.MustacheStatement(node);
        // These are the same in ASTv2

        case 'MustacheCommentStatement':
          return this.MustacheCommentStatement(node);

        case 'CommentStatement':
          {
            var loc = this.block.loc(node.loc);
            return new HtmlComment({
              loc: loc,
              text: loc.slice({
                skipStart: 4,
                skipEnd: 3
              }).toSlice(node.value)
            });
          }

        case 'TextNode':
          return new HtmlText({
            loc: this.block.loc(node.loc),
            chars: node.chars
          });
      }
    };

    _proto3.MustacheCommentStatement = function MustacheCommentStatement(node) {
      var loc = this.block.loc(node.loc);
      var textLoc;

      if (loc.asString().slice(0, 5) === '{{!--') {
        textLoc = loc.slice({
          skipStart: 5,
          skipEnd: 4
        });
      } else {
        textLoc = loc.slice({
          skipStart: 3,
          skipEnd: 2
        });
      }

      return new GlimmerComment({
        loc: loc,
        text: textLoc.toSlice(node.value)
      });
    }
    /**
     * Normalizes an ASTv1.MustacheStatement to an ASTv2.AppendStatement
     */
    ;

    _proto3.MustacheStatement = function MustacheStatement(mustache) {
      var escaped = mustache.escaped;
      var loc = this.block.loc(mustache.loc); // Normalize the call parts in AppendSyntaxContext

      var callParts = this.expr.callParts({
        path: mustache.path,
        params: mustache.params,
        hash: mustache.hash
      }, AppendSyntaxContext(mustache));
      var value = callParts.args.isEmpty() ? callParts.callee : this.block.builder.sexp(callParts, loc);
      return this.block.builder.append({
        table: this.block.table,
        trusting: !escaped,
        value: value
      }, loc);
    }
    /**
     * Normalizes a ASTv1.BlockStatement to an ASTv2.BlockStatement
     */
    ;

    _proto3.BlockStatement = function BlockStatement(block) {
      var program = block.program,
          inverse = block.inverse;
      var loc = this.block.loc(block.loc);
      var resolution = this.block.resolutionFor(block, BlockSyntaxContext);

      if (resolution.resolution === 'error') {
        throw generateSyntaxError("You attempted to invoke a path (`{{#" + resolution.path + "}}`) but " + resolution.head + " was not in scope", loc);
      }

      var callParts = this.expr.callParts(block, resolution.resolution);
      return this.block.builder.blockStatement(util.assign({
        symbols: this.block.table,
        program: this.Block(program),
        inverse: inverse ? this.Block(inverse) : null
      }, callParts), loc);
    };

    _proto3.Block = function Block(_ref) {
      var body = _ref.body,
          loc = _ref.loc,
          blockParams = _ref.blockParams;
      var child = this.block.child(blockParams);
      var normalizer = new StatementNormalizer(child);
      return new BlockChildren(this.block.loc(loc), body.map(function (b) {
        return normalizer.normalize(b);
      }), this.block).assertBlock(child.table);
    };

    _createClass$a(StatementNormalizer, [{
      key: "expr",
      get: function get() {
        return new ExpressionNormalizer(this.block);
      }
    }]);

    return StatementNormalizer;
  }();

  var ElementNormalizer = /*#__PURE__*/function () {
    function ElementNormalizer(ctx) {
      this.ctx = ctx;
    }
    /**
     * Normalizes an ASTv1.ElementNode to:
     *
     * - ASTv2.NamedBlock if the tag name begins with `:`
     * - ASTv2.Component if the tag name matches the component heuristics
     * - ASTv2.SimpleElement if the tag name doesn't match the component heuristics
     *
     * A tag name represents a component if:
     *
     * - it begins with `@`
     * - it is exactly `this` or begins with `this.`
     * - the part before the first `.` is a reference to an in-scope variable binding
     * - it begins with an uppercase character
     */


    var _proto4 = ElementNormalizer.prototype;

    _proto4.ElementNode = function ElementNode(element) {
      var _this2 = this;

      var tag = element.tag,
          selfClosing = element.selfClosing,
          comments = element.comments;
      var loc = this.ctx.loc(element.loc);

      var _tag$split = tag.split('.'),
          tagHead = _tag$split[0],
          rest = _tag$split.slice(1); // the head, attributes and modifiers are in the current scope


      var path = this.classifyTag(tagHead, rest, element.loc);
      var attrs = element.attributes.filter(function (a) {
        return a.name[0] !== '@';
      }).map(function (a) {
        return _this2.attr(a);
      });
      var args = element.attributes.filter(function (a) {
        return a.name[0] === '@';
      }).map(function (a) {
        return _this2.arg(a);
      });
      var modifiers = element.modifiers.map(function (m) {
        return _this2.modifier(m);
      }); // the element's block params are in scope for the children

      var child = this.ctx.child(element.blockParams);
      var normalizer = new StatementNormalizer(child);
      var childNodes = element.children.map(function (s) {
        return normalizer.normalize(s);
      });
      var el = this.ctx.builder.element({
        selfClosing: selfClosing,
        attrs: attrs,
        componentArgs: args,
        modifiers: modifiers,
        comments: comments.map(function (c) {
          return new StatementNormalizer(_this2.ctx).MustacheCommentStatement(c);
        })
      });
      var children = new ElementChildren(el, loc, childNodes, this.ctx);
      var offsets = this.ctx.loc(element.loc);
      var tagOffsets = offsets.sliceStartChars({
        chars: tag.length,
        skipStart: 1
      });

      if (path === 'ElementHead') {
        if (tag[0] === ':') {
          return children.assertNamedBlock(tagOffsets.slice({
            skipStart: 1
          }).toSlice(tag.slice(1)), child.table);
        } else {
          return children.assertElement(tagOffsets.toSlice(tag), element.blockParams.length > 0);
        }
      }

      if (element.selfClosing) {
        return el.selfClosingComponent(path, loc);
      } else {
        var blocks = children.assertComponent(tag, child.table, element.blockParams.length > 0);
        return el.componentWithNamedBlocks(path, blocks, loc);
      }
    };

    _proto4.modifier = function modifier(m) {
      var resolution = this.ctx.resolutionFor(m, ModifierSyntaxContext);

      if (resolution.resolution === 'error') {
        throw generateSyntaxError("You attempted to invoke a path (`{{#" + resolution.path + "}}`) as a modifier, but " + resolution.head + " was not in scope. Try adding `this` to the beginning of the path", m.loc);
      }

      var callParts = this.expr.callParts(m, resolution.resolution);
      return this.ctx.builder.modifier(callParts, this.ctx.loc(m.loc));
    }
    /**
     * This method handles attribute values that are curlies, as well as curlies nested inside of
     * interpolations:
     *
     * ```hbs
     * <a href={{url}} />
     * <a href="{{url}}.html" />
     * ```
     */
    ;

    _proto4.mustacheAttr = function mustacheAttr(mustache) {
      // Normalize the call parts in AttrValueSyntaxContext
      var sexp = this.ctx.builder.sexp(this.expr.callParts(mustache, AttrValueSyntaxContext(mustache)), this.ctx.loc(mustache.loc)); // If there are no params or hash, just return the function part as its own expression

      if (sexp.args.isEmpty()) {
        return sexp.callee;
      } else {
        return sexp;
      }
    }
    /**
     * attrPart is the narrowed down list of valid attribute values that are also
     * allowed as a concat part (you can't nest concats).
     */
    ;

    _proto4.attrPart = function attrPart(part) {
      switch (part.type) {
        case 'MustacheStatement':
          return {
            expr: this.mustacheAttr(part),
            trusting: !part.escaped
          };

        case 'TextNode':
          return {
            expr: this.ctx.builder.literal(part.chars, this.ctx.loc(part.loc)),
            trusting: true
          };
      }
    };

    _proto4.attrValue = function attrValue(part) {
      var _this3 = this;

      switch (part.type) {
        case 'ConcatStatement':
          {
            var parts = part.parts.map(function (p) {
              return _this3.attrPart(p).expr;
            });
            return {
              expr: this.ctx.builder.interpolate(parts, this.ctx.loc(part.loc)),
              trusting: false
            };
          }

        default:
          return this.attrPart(part);
      }
    };

    _proto4.attr = function attr(m) {

      if (m.name === '...attributes') {
        return this.ctx.builder.splatAttr(this.ctx.table.allocateBlock('attrs'), this.ctx.loc(m.loc));
      }

      var offsets = this.ctx.loc(m.loc);
      var nameSlice = offsets.sliceStartChars({
        chars: m.name.length
      }).toSlice(m.name);
      var value = this.attrValue(m.value);
      return this.ctx.builder.attr({
        name: nameSlice,
        value: value.expr,
        trusting: value.trusting
      }, offsets);
    };

    _proto4.maybeDeprecatedCall = function maybeDeprecatedCall(arg, part) {
      if (this.ctx.strict) {
        return null;
      }

      if (part.type !== 'MustacheStatement') {
        return null;
      }

      var path = part.path;

      if (path.type !== 'PathExpression') {
        return null;
      }

      if (path.head.type !== 'VarHead') {
        return null;
      }

      var name = path.head.name;

      if (name === 'has-block' || name === 'has-block-params') {
        return null;
      }

      if (this.ctx.hasBinding(name)) {
        return null;
      }

      if (path.tail.length !== 0) {
        return null;
      }

      if (part.params.length !== 0 || part.hash.pairs.length !== 0) {
        return null;
      }

      var context = LooseModeResolution.attr();
      var callee = this.ctx.builder.freeVar({
        name: name,
        context: context,
        symbol: this.ctx.table.allocateFree(name, context),
        loc: path.loc
      });
      return {
        expr: this.ctx.builder.deprecatedCall(arg, callee, part.loc),
        trusting: false
      };
    };

    _proto4.arg = function arg(_arg) {
      var offsets = this.ctx.loc(_arg.loc);
      var nameSlice = offsets.sliceStartChars({
        chars: _arg.name.length
      }).toSlice(_arg.name);
      var value = this.maybeDeprecatedCall(nameSlice, _arg.value) || this.attrValue(_arg.value);
      return this.ctx.builder.arg({
        name: nameSlice,
        value: value.expr,
        trusting: value.trusting
      }, offsets);
    }
    /**
     * This function classifies the head of an ASTv1.Element into an ASTv2.PathHead (if the
     * element is a component) or `'ElementHead'` (if the element is a simple element).
     *
     * Rules:
     *
     * 1. If the variable is an `@arg`, return an `AtHead`
     * 2. If the variable is `this`, return a `ThisHead`
     * 3. If the variable is in the current scope:
     *   a. If the scope is the root scope, then return a Free `LocalVarHead`
     *   b. Else, return a standard `LocalVarHead`
     * 4. If the tag name is a path and the variable is not in the current scope, Syntax Error
     * 5. If the variable is uppercase return a FreeVar(ResolveAsComponentHead)
     * 6. Otherwise, return `'ElementHead'`
     */
    ;

    _proto4.classifyTag = function classifyTag(variable, tail, loc) {
      var uppercase = isUpperCase(variable);
      var inScope = variable[0] === '@' || variable === 'this' || this.ctx.hasBinding(variable);

      if (this.ctx.strict && !inScope) {
        if (uppercase) {
          throw generateSyntaxError("Attempted to invoke a component that was not in scope in a strict mode template, `<" + variable + ">`. If you wanted to create an element with that name, convert it to lowercase - `<" + variable.toLowerCase() + ">`", loc);
        } // In strict mode, values are always elements unless they are in scope


        return 'ElementHead';
      } // Since the parser handed us the HTML element name as a string, we need
      // to convert it into an ASTv1 path so it can be processed using the
      // expression normalizer.


      var isComponent = inScope || uppercase;
      var variableLoc = loc.sliceStartChars({
        skipStart: 1,
        chars: variable.length
      });
      var tailLength = tail.reduce(function (accum, part) {
        return accum + 1 + part.length;
      }, 0);
      var pathEnd = variableLoc.getEnd().move(tailLength);
      var pathLoc = variableLoc.withEnd(pathEnd);

      if (isComponent) {
        var path = b.path({
          head: b.head(variable, variableLoc),
          tail: tail,
          loc: pathLoc
        });
        var resolution = this.ctx.resolutionFor(path, ComponentSyntaxContext);

        if (resolution.resolution === 'error') {
          throw generateSyntaxError("You attempted to invoke a path (`<" + resolution.path + ">`) but " + resolution.head + " was not in scope", loc);
        }

        return new ExpressionNormalizer(this.ctx).normalize(path, resolution.resolution);
      } // If the tag name wasn't a valid component but contained a `.`, it's
      // a syntax error.


      if (tail.length > 0) {
        throw generateSyntaxError("You used " + variable + "." + tail.join('.') + " as a tag name, but " + variable + " is not in scope", loc);
      }

      return 'ElementHead';
    };

    _createClass$a(ElementNormalizer, [{
      key: "expr",
      get: function get() {
        return new ExpressionNormalizer(this.ctx);
      }
    }]);

    return ElementNormalizer;
  }();

  var Children = function Children(loc, children, block) {
    this.loc = loc;
    this.children = children;
    this.block = block;
    this.namedBlocks = children.filter(function (c) {
      return c instanceof NamedBlock;
    });
    this.hasSemanticContent = Boolean(children.filter(function (c) {
      if (c instanceof NamedBlock) {
        return false;
      }

      switch (c.type) {
        case 'GlimmerComment':
        case 'HtmlComment':
          return false;

        case 'HtmlText':
          return !/^\s*$/.exec(c.chars);

        default:
          return true;
      }
    }).length);
    this.nonBlockChildren = children.filter(function (c) {
      return !(c instanceof NamedBlock);
    });
  };

  var TemplateChildren = /*#__PURE__*/function (_Children) {
    _inheritsLoose$9(TemplateChildren, _Children);

    function TemplateChildren() {
      return _Children.apply(this, arguments) || this;
    }

    var _proto5 = TemplateChildren.prototype;

    _proto5.assertTemplate = function assertTemplate(table) {
      if (util.isPresent(this.namedBlocks)) {
        throw generateSyntaxError("Unexpected named block at the top-level of a template", this.loc);
      }

      return this.block.builder.template(table, this.nonBlockChildren, this.block.loc(this.loc));
    };

    return TemplateChildren;
  }(Children);

  var BlockChildren = /*#__PURE__*/function (_Children2) {
    _inheritsLoose$9(BlockChildren, _Children2);

    function BlockChildren() {
      return _Children2.apply(this, arguments) || this;
    }

    var _proto6 = BlockChildren.prototype;

    _proto6.assertBlock = function assertBlock(table) {
      if (util.isPresent(this.namedBlocks)) {
        throw generateSyntaxError("Unexpected named block nested in a normal block", this.loc);
      }

      return this.block.builder.block(table, this.nonBlockChildren, this.loc);
    };

    return BlockChildren;
  }(Children);

  var ElementChildren = /*#__PURE__*/function (_Children3) {
    _inheritsLoose$9(ElementChildren, _Children3);

    function ElementChildren(el, loc, children, block) {
      var _this4;

      _this4 = _Children3.call(this, loc, children, block) || this;
      _this4.el = el;
      return _this4;
    }

    var _proto7 = ElementChildren.prototype;

    _proto7.assertNamedBlock = function assertNamedBlock(name, table) {
      if (this.el.base.selfClosing) {
        throw generateSyntaxError("<:" + name.chars + "/> is not a valid named block: named blocks cannot be self-closing", this.loc);
      }

      if (util.isPresent(this.namedBlocks)) {
        throw generateSyntaxError("Unexpected named block inside <:" + name.chars + "> named block: named blocks cannot contain nested named blocks", this.loc);
      }

      if (!isLowerCase(name.chars)) {
        throw generateSyntaxError("<:" + name.chars + "> is not a valid named block, and named blocks must begin with a lowercase letter", this.loc);
      }

      if (this.el.base.attrs.length > 0 || this.el.base.componentArgs.length > 0 || this.el.base.modifiers.length > 0) {
        throw generateSyntaxError("named block <:" + name.chars + "> cannot have attributes, arguments, or modifiers", this.loc);
      }

      var offsets = SpanList.range(this.nonBlockChildren, this.loc);
      return this.block.builder.namedBlock(name, this.block.builder.block(table, this.nonBlockChildren, offsets), this.loc);
    };

    _proto7.assertElement = function assertElement(name, hasBlockParams) {
      if (hasBlockParams) {
        throw generateSyntaxError("Unexpected block params in <" + name + ">: simple elements cannot have block params", this.loc);
      }

      if (util.isPresent(this.namedBlocks)) {
        var names = this.namedBlocks.map(function (b) {
          return b.name;
        });

        if (names.length === 1) {
          throw generateSyntaxError("Unexpected named block <:foo> inside <" + name.chars + "> HTML element", this.loc);
        } else {
          var printedNames = names.map(function (n) {
            return "<:" + n.chars + ">";
          }).join(', ');
          throw generateSyntaxError("Unexpected named blocks inside <" + name.chars + "> HTML element (" + printedNames + ")", this.loc);
        }
      }

      return this.el.simple(name, this.nonBlockChildren, this.loc);
    };

    _proto7.assertComponent = function assertComponent(name, table, hasBlockParams) {
      if (util.isPresent(this.namedBlocks) && this.hasSemanticContent) {
        throw generateSyntaxError("Unexpected content inside <" + name + "> component invocation: when using named blocks, the tag cannot contain other content", this.loc);
      }

      if (util.isPresent(this.namedBlocks)) {
        if (hasBlockParams) {
          throw generateSyntaxError("Unexpected block params list on <" + name + "> component invocation: when passing named blocks, the invocation tag cannot take block params", this.loc);
        }

        var seenNames = new Set();

        for (var _iterator2 = _createForOfIteratorHelperLoose$2(this.namedBlocks), _step2; !(_step2 = _iterator2()).done;) {
          var block = _step2.value;
          var _name = block.name.chars;

          if (seenNames.has(_name)) {
            throw generateSyntaxError("Component had two named blocks with the same name, `<:" + _name + ">`. Only one block with a given name may be passed", this.loc);
          }

          if (_name === 'inverse' && seenNames.has('else') || _name === 'else' && seenNames.has('inverse')) {
            throw generateSyntaxError("Component has both <:else> and <:inverse> block. <:inverse> is an alias for <:else>", this.loc);
          }

          seenNames.add(_name);
        }

        return this.namedBlocks;
      } else {
        return [this.block.builder.namedBlock(SourceSlice.synthetic('default'), this.block.builder.block(table, this.nonBlockChildren, this.loc), this.loc)];
      }
    };

    return ElementChildren;
  }(Children);

  function printPath(node) {
    if (node.type !== 'PathExpression' && node.path.type === 'PathExpression') {
      return printPath(node.path);
    } else {
      return new Printer({
        entityEncoding: 'raw'
      }).print(node);
    }
  }

  function printHead(node) {
    if (node.type === 'PathExpression') {
      switch (node.head.type) {
        case 'AtHead':
        case 'VarHead':
          return node.head.name;

        case 'ThisHead':
          return 'this';
      }
    } else if (node.path.type === 'PathExpression') {
      return printHead(node.path);
    } else {
      return new Printer({
        entityEncoding: 'raw'
      }).print(node);
    }
  }

  function isKeyword(word) {
    return word in KEYWORDS_TYPES;
  }
  /**
   * This includes the full list of keywords currently in use in the template
   * language, and where their valid usages are.
   */

  var KEYWORDS_TYPES = {
    component: ['Call', 'Append', 'Block'],
    "debugger": ['Append'],
    'each-in': ['Block'],
    each: ['Block'],
    'has-block-params': ['Call', 'Append'],
    'has-block': ['Call', 'Append'],
    helper: ['Call', 'Append'],
    "if": ['Call', 'Append', 'Block'],
    'in-element': ['Block'],
    "let": ['Block'],
    'link-to': ['Append', 'Block'],
    log: ['Call', 'Append'],
    modifier: ['Call'],
    mount: ['Append'],
    mut: ['Call', 'Append'],
    outlet: ['Append'],
    'query-params': ['Call'],
    readonly: ['Call', 'Append'],
    unbound: ['Call', 'Append'],
    unless: ['Call', 'Append', 'Block'],
    "with": ['Block'],
    "yield": ['Append']
  };

  /**
   * Gets the correct Token from the Node based on it's type
   */

  function tokensFromType(node, scopedTokens, options) {
    if (node.type === 'PathExpression') {
      if (node.head.type === 'AtHead' || node.head.type === 'ThisHead') {
        return;
      }

      var possbleToken = node.head.name;

      if (scopedTokens.indexOf(possbleToken) === -1) {
        return possbleToken;
      }
    } else if (node.type === 'ElementNode') {
      var tag = node.tag;

      var _char = tag.charAt(0);

      if (_char === ':' || _char === '@') {
        return;
      }

      if (!options.includeHtmlElements && tag.indexOf('.') === -1 && tag.toLowerCase() === tag) {
        return;
      }

      if (tag.substr(0, 5) === 'this.') {
        return;
      }

      if (scopedTokens.indexOf(tag) !== -1) {
        return;
      }

      return tag;
    }
  }
  /**
   * Adds tokens to the tokensSet based on their node.type
   */


  function addTokens(tokensSet, node, scopedTokens, options) {
    var maybeTokens = tokensFromType(node, scopedTokens, options);
    (Array.isArray(maybeTokens) ? maybeTokens : [maybeTokens]).forEach(function (maybeToken) {
      if (maybeToken !== undefined && maybeToken[0] !== '@') {
        tokensSet.add(maybeToken.split('.')[0]);
      }
    });
  }
  /**
   * Parses and traverses a given handlebars html template to extract all template locals
   * referenced that could possible come from the praent scope. Can exclude known keywords
   * optionally.
   */


  function getTemplateLocals(html, options) {
    if (options === void 0) {
      options = {
        includeHtmlElements: false,
        includeKeywords: false
      };
    }

    var ast = preprocess(html);
    var tokensSet = new Set();
    var scopedTokens = [];
    traverse(ast, {
      Block: {
        enter: function enter(_ref) {
          var blockParams = _ref.blockParams;
          blockParams.forEach(function (param) {
            scopedTokens.push(param);
          });
        },
        exit: function exit(_ref2) {
          var blockParams = _ref2.blockParams;
          blockParams.forEach(function () {
            scopedTokens.pop();
          });
        }
      },
      ElementNode: {
        enter: function enter(node) {
          node.blockParams.forEach(function (param) {
            scopedTokens.push(param);
          });
          addTokens(tokensSet, node, scopedTokens, options);
        },
        exit: function exit(_ref3) {
          var blockParams = _ref3.blockParams;
          blockParams.forEach(function () {
            scopedTokens.pop();
          });
        }
      },
      PathExpression: function PathExpression(node) {
        addTokens(tokensSet, node, scopedTokens, options);
      }
    });
    var tokens = [];
    tokensSet.forEach(function (s) {
      return tokens.push(s);
    });

    if (!(options === null || options === void 0 ? void 0 : options.includeKeywords)) {
      tokens = tokens.filter(function (token) {
        return !isKeyword(token);
      });
    }

    return tokens;
  }

  exports.AST = api;
  exports.ASTv1 = api;
  exports.ASTv2 = api$1;
  exports.BlockSymbolTable = BlockSymbolTable;
  exports.KEYWORDS_TYPES = KEYWORDS_TYPES;
  exports.Path = Walker;
  exports.ProgramSymbolTable = ProgramSymbolTable;
  exports.Source = Source;
  exports.SourceSlice = SourceSlice;
  exports.SourceSpan = SourceSpan;
  exports.SpanList = SpanList;
  exports.SymbolTable = SymbolTable;
  exports.Walker = Walker;
  exports.WalkerPath = WalkerPath;
  exports.builders = publicBuilder;
  exports.cannotRemoveNode = cannotRemoveNode;
  exports.cannotReplaceNode = cannotReplaceNode;
  exports.generateSyntaxError = generateSyntaxError;
  exports.getTemplateLocals = getTemplateLocals;
  exports.hasSpan = hasSpan;
  exports.isKeyword = isKeyword;
  exports.loc = loc;
  exports.maybeLoc = maybeLoc;
  exports.node = node;
  exports.normalize = normalize;
  exports.preprocess = preprocess;
  exports.print = build;
  exports.sortByLoc = sortByLoc;
  exports.traverse = traverse;

  Object.defineProperty(exports, '__esModule', { value: true });

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
