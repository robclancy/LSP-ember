"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HoverProvider = void 0;
const syntax_1 = require("@glimmer/syntax");
const ember_meta_explorer_1 = require("ember-meta-explorer");
const estree_utils_1 = require("../estree-utils");
const glimmer_utils_1 = require("../glimmer-utils");
const layout_helpers_1 = require("../utils/layout-helpers");
const logger_1 = require("../utils/logger");
const addon_api_1 = require("./../utils/addon-api");
class HoverProvider {
    constructor(server) {
        this.server = server;
    }
    async provideHover({ textDocument, position }) {
        const project = this.server.projectRoots.projectForUri(textDocument.uri);
        if (!project) {
            return null;
        }
        const { focusPath, type } = this.getFocusPath(textDocument, position);
        if (!focusPath) {
            return null;
        }
        const internalResults = await (0, addon_api_1.queryELSAddonsAPIChain)(project.builtinProviders.hoverProviders, project.root, {
            textDocument,
            focusPath,
            type,
            position,
            results: [],
            server: this.server,
        });
        const addonResults = await (0, addon_api_1.queryELSAddonsAPIChain)(project.providers.hoverProviders, project.root, {
            textDocument,
            focusPath,
            type,
            position,
            results: internalResults,
            server: this.server,
        });
        if (addonResults.length) {
            return addonResults[0];
        }
        return null;
    }
    getFocusPath(textDocument, position) {
        const project = this.server.projectRoots.projectForUri(textDocument.uri);
        if (!project) {
            return {};
        }
        const document = this.server.documents.get(textDocument.uri);
        const content = document === null || document === void 0 ? void 0 : document.getText();
        if (!content) {
            return {};
        }
        let ast = null;
        let type;
        try {
            if ((0, layout_helpers_1.isScriptPath)(textDocument.uri)) {
                ast = (0, ember_meta_explorer_1.parseScriptFile)(content);
                type = 'script';
            }
            else if ((0, layout_helpers_1.isTemplatePath)(textDocument.uri)) {
                ast = (0, syntax_1.preprocess)(content);
                type = 'template';
            }
            else {
                return {};
            }
        }
        catch (e) {
            (0, logger_1.logDebugInfo)('error', e);
            return {};
        }
        const focusPath = glimmer_utils_1.default.toPosition(ast, (0, estree_utils_1.toPosition)(position), content);
        return { focusPath, type };
    }
}
exports.HoverProvider = HoverProvider;
//# sourceMappingURL=entry.js.map