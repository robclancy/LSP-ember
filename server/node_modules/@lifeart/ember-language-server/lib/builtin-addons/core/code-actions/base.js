"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const file_extension_1 = require("../../../utils/file-extension");
const ember_extract_inline_templates_1 = require("@lifeart/ember-extract-inline-templates");
const ember_meta_explorer_1 = require("ember-meta-explorer");
const estree_utils_1 = require("../../../estree-utils");
const glimmer_script_1 = require("../../../utils/glimmer-script");
const diagnostic_1 = require("../../../utils/diagnostic");
function findValidNodeSelection(focusPath) {
    var _a;
    const validNodes = ['ElementNode', 'BlockStatement', 'MustacheStatement', 'Template'];
    let cursor = focusPath;
    while (cursor && cursor.node) {
        if (validNodes.includes(cursor.node.type)) {
            if (cursor.node.type === 'MustacheStatement') {
                if (((_a = cursor.parentPath) === null || _a === void 0 ? void 0 : _a.node.type) === 'AttrNode') {
                    const resolvedPath = cursor.parentPath.parentPath;
                    return {
                        selection: resolvedPath.sourceForNode(),
                        location: resolvedPath.node.loc,
                    };
                }
            }
            return {
                selection: cursor.sourceForNode(),
                location: cursor.node.loc,
            };
        }
        cursor = cursor.parentPath;
    }
    return null;
}
const extensionsToLint = ['.hbs', '.js', '.ts', '.gts', 'gjs'];
class BaseCodeActionProvider {
    onInit(server, project) {
        this.server = server;
        this.project = project;
    }
    metaForRange(params) {
        const documentContent = params.document.getText();
        const extension = (0, file_extension_1.getExtension)(params.textDocument);
        let ast;
        if (!extensionsToLint.includes(extension)) {
            return null;
        }
        if (extension === '.hbs') {
            ast = this.server.templateCompletionProvider.getAST(documentContent);
        }
        else if (extension === '.gjs' || extension === '.gts') {
            const ranges = (0, glimmer_script_1.getFileRanges)(documentContent);
            const rangeWalker = new glimmer_script_1.RangeWalker(ranges);
            const templates = rangeWalker.templates();
            if (!templates.length) {
                return null;
            }
            const t = templates[0];
            const source = (0, diagnostic_1.toHbsSource)({
                startLine: t.loc.start.line,
                startColumn: t.loc.start.character,
                endColumn: t.loc.end.character,
                endLine: t.loc.end.line,
                template: t.content,
            });
            ast = this.server.templateCompletionProvider.getAST(source);
        }
        else {
            const templateData = (0, ember_extract_inline_templates_1.searchAndExtractHbs)(documentContent, {
                parse(source) {
                    return (0, ember_meta_explorer_1.parseScriptFile)(source);
                },
            });
            ast = this.server.templateCompletionProvider.getAST(templateData);
        }
        let focusPath = this.server.templateCompletionProvider.createFocusPath(ast, (0, estree_utils_1.toPosition)(params.range.start), documentContent);
        if (!focusPath) {
            return null;
        }
        focusPath = this.server.templateCompletionProvider.createFocusPath(ast, (0, estree_utils_1.toPosition)(params.range.end), documentContent);
        if (!focusPath) {
            return null;
        }
        const meta = findValidNodeSelection(focusPath);
        return meta;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async onCodeAction(_, __) {
        return null;
    }
}
exports.default = BaseCodeActionProvider;
//# sourceMappingURL=base.js.map