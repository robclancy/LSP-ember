"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initBuiltinProviders = void 0;
const template_lint_fixes_1 = require("../builtin-addons/core/code-actions/template-lint-fixes");
const template_lint_comments_1 = require("../builtin-addons/core/code-actions/template-lint-comments");
const typed_template_comments_1 = require("../builtin-addons/core/code-actions/typed-template-comments");
const script_definition_provider_1 = require("./../builtin-addons/core/script-definition-provider");
const template_definition_provider_1 = require("./../builtin-addons/core/template-definition-provider");
const script_completion_provider_1 = require("./../builtin-addons/core/script-completion-provider");
const template_completion_provider_1 = require("./../builtin-addons/core/template-completion-provider");
const intl_completion_provider_1 = require("../builtin-addons/core/intl-completion-provider");
const logger_1 = require("./logger");
const intl_definition_provider_1 = require("../builtin-addons/core/intl-definition-provider");
const intl_hover_provider_1 = require("../builtin-addons/core/intl-hover-provider");
function initBuiltinProviders(addonsMeta) {
    const scriptDefinition = new script_definition_provider_1.default();
    const templateDefinition = new template_definition_provider_1.default();
    const scriptCompletion = new script_completion_provider_1.default();
    const templateCompletion = new template_completion_provider_1.default();
    const templateLintFixesCodeAction = new template_lint_fixes_1.default();
    const templateLintCommentsCodeAction = new template_lint_comments_1.default();
    const typedTemplatesCodeAction = new typed_template_comments_1.default();
    const intlDefinition = new intl_definition_provider_1.default();
    const intlHover = new intl_hover_provider_1.default();
    const definitionProviders = [
        scriptDefinition.onDefinition.bind(scriptDefinition),
        templateDefinition.onDefinition.bind(templateDefinition),
        intlDefinition.onDefinition.bind(intlDefinition),
    ];
    const referencesProviders = [];
    const codeActionProviders = [
        templateLintFixesCodeAction.onCodeAction.bind(templateLintFixesCodeAction),
        templateLintCommentsCodeAction.onCodeAction.bind(templateLintCommentsCodeAction),
        typedTemplatesCodeAction.onCodeAction.bind(typedTemplatesCodeAction),
    ];
    const initFunctions = [
        templateLintFixesCodeAction.onInit.bind(templateLintFixesCodeAction),
        templateLintCommentsCodeAction.onInit.bind(templateLintCommentsCodeAction),
        typedTemplatesCodeAction.onInit.bind(typedTemplatesCodeAction),
        templateCompletion.initRegistry.bind(templateCompletion),
        scriptCompletion.initRegistry.bind(scriptCompletion),
        templateDefinition.onInit.bind(templateDefinition),
        scriptDefinition.onInit.bind(scriptDefinition),
        intlDefinition.onInit.bind(intlDefinition),
        intlHover.onInit.bind(intlHover),
    ];
    const completionProviders = [scriptCompletion.onComplete.bind(scriptCompletion), templateCompletion.onComplete.bind(templateCompletion)];
    const hoverProviders = [intlHover.onHover.bind(intlHover)];
    if (!addonsMeta.find((addon) => addon.name == 'els-intl-addon')) {
        const intlCompletion = new intl_completion_provider_1.default();
        initFunctions.push(intlCompletion.onInit.bind(intlCompletion));
        completionProviders.push(intlCompletion.onComplete.bind(intlCompletion));
    }
    else {
        (0, logger_1.logInfo)('Detected project installed `els-intl-addon`, builtin intl addon will be disabled');
    }
    return {
        definitionProviders,
        referencesProviders,
        codeActionProviders,
        hoverProviders,
        initFunctions,
        info: [],
        addonsMeta: [],
        completionProviders,
    };
}
exports.initBuiltinProviders = initBuiltinProviders;
//# sourceMappingURL=builtin-addons-initializer.js.map