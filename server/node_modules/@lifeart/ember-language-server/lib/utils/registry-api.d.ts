import { MatchResult } from './path-matcher';
declare type GLOBAL_REGISTRY_ITEM = Map<string, Set<string>>;
export declare type REGISTRY_KIND = 'transform' | 'helper' | 'component' | 'routePath' | 'model' | 'service' | 'modifier';
export declare function getGlobalRegistry(): {
    transform: GLOBAL_REGISTRY_ITEM;
    helper: GLOBAL_REGISTRY_ITEM;
    component: GLOBAL_REGISTRY_ITEM;
    routePath: GLOBAL_REGISTRY_ITEM;
    model: GLOBAL_REGISTRY_ITEM;
    service: GLOBAL_REGISTRY_ITEM;
    modifier: GLOBAL_REGISTRY_ITEM;
};
export declare function disableTemplateTokensCollection(): void;
export declare function enableTemplateTokensCollection(): void;
export declare function canCollectTemplateTokens(): boolean;
export interface NormalizedRegistryItem {
    type: REGISTRY_KIND;
    name: string;
}
export declare function normalizeMatchNaming(item: MatchResult): NormalizedRegistryItem;
export declare function removeFromRegistry(normalizedName: string, kind: REGISTRY_KIND, files: string[]): void;
export declare type IRegistry = {
    [key in REGISTRY_KIND]: {
        [key: string]: string[];
    };
};
export declare function getRegistryForRoots(rawRoots: string[]): IRegistry;
export declare function getRegistryForRoot(rawRoot: string): IRegistry;
export declare function existsInRegistry(name: string, kind: REGISTRY_KIND, file: string): boolean | undefined;
export declare function addToRegistry(normalizedName: string, kind: REGISTRY_KIND, files: string[]): void;
export {};
