"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ember_extract_inline_templates_1 = require("@lifeart/ember-extract-inline-templates");
const file_extension_1 = require("./../utils/file-extension");
const addon_api_1 = require("./../utils/addon-api");
const estree_utils_1 = require("./../estree-utils");
const glimmer_utils_1 = require("./../glimmer-utils");
const syntax_1 = require("@glimmer/syntax");
const ember_meta_explorer_1 = require("ember-meta-explorer");
class TemplateDefinitionProvider {
    constructor(server) {
        this.server = server;
    }
    async handle(params, project) {
        const uri = params.textDocument.uri;
        const root = project.root;
        const document = this.server.documents.get(uri);
        if (!document) {
            return null;
        }
        const ext = (0, file_extension_1.getExtension)(params.textDocument);
        const isScript = ['.ts', '.js'].includes(ext);
        const content = isScript
            ? (0, ember_extract_inline_templates_1.searchAndExtractHbs)(document.getText(), {
                parse(source) {
                    return (0, ember_meta_explorer_1.parseScriptFile)(source);
                },
            })
            : document.getText();
        const ast = (0, syntax_1.preprocess)(content);
        const focusPath = glimmer_utils_1.default.toPosition(ast, (0, estree_utils_1.toPosition)(params.position), content);
        if (!focusPath) {
            return null;
        }
        const definitions = await (0, addon_api_1.queryELSAddonsAPIChain)(project.builtinProviders.definitionProviders, root, {
            focusPath,
            type: 'template',
            textDocument: params.textDocument,
            position: params.position,
            results: [],
            server: this.server,
        });
        const addonResults = await (0, addon_api_1.queryELSAddonsAPIChain)(project.providers.definitionProviders, root, {
            focusPath,
            type: 'template',
            textDocument: params.textDocument,
            position: params.position,
            results: definitions,
            server: this.server,
        });
        return addonResults;
    }
    get handler() {
        return this.handle.bind(this);
    }
}
exports.default = TemplateDefinitionProvider;
//# sourceMappingURL=template.js.map