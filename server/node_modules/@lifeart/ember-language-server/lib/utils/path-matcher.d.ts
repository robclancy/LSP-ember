export declare type MatchResultType = 'helper' | 'util' | 'service' | 'route' | 'controller' | 'modifier' | 'template' | 'component' | 'model' | 'transform' | 'adapter' | 'serializer';
export declare type MatchResultScope = 'addon' | 'application';
export declare type MatchResultKind = 'test' | 'script' | 'template' | 'style';
export interface MatchResult {
    type: MatchResultType;
    name: string;
    scope: MatchResultScope;
    kind: MatchResultKind;
}
export declare class ClassicPathMatcher {
    private root;
    constructor(root?: string);
    keys: {
        [key: string]: string[];
    };
    ignores: string[];
    setIgnores(ignores: string[]): void;
    matchKey(key: string, str: string): boolean;
    rightPartFromFirstMatch(type: string, fileName: string, extName: string, str: string, strToMatch: string): string;
    metaFromPath(rawAbsoluteAbsPath: string): MatchResult | null;
}
export declare class PodMatcher extends ClassicPathMatcher {
    constructor(root: string, podPrefix?: string | false);
    podPrefix: string;
    keys: {
        helper: string[];
        service: string[];
        modifier: string[];
        controller: string[];
        route: string[];
        template: string[];
        component: string[];
        model: string[];
        transform: string[];
        adapter: string[];
        serializer: string[];
        util: string[];
    };
    rightPartFromFirstMatch(propName: string, fileName: string, extName: string, str: string, strToMatch: string): string;
}
