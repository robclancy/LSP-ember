import type * as t from '@babel/types';
import { Definition, Location } from 'vscode-languageserver/node';
import { DefinitionFunctionParams } from './../../utils/addon-api';
import { Project } from '../../project';
import Server from '../../server';
import { IRegistry } from '../../utils/registry-api';
import { Position } from 'vscode-languageserver-textdocument';
declare type ItemType = 'Model' | 'Transform' | 'Service';
export default class CoreScriptDefinitionProvider {
    private resolvers;
    constructor();
    get registry(): IRegistry;
    server: Server;
    project: Project;
    onInit(server: Server, project: Project): Promise<void>;
    guessPathForImport(root: string, uri: string, importPath: string, importName?: string): Promise<Location[] | null>;
    guessPathsForType(root: string, fnName: ItemType, typeName: string): Promise<Location[]>;
    getImportSpecifierName(importDeclaration: t.ImportDeclaration, position: Position): string;
    onDefinition(root: string, params: DefinitionFunctionParams): Promise<Definition | null>;
}
export {};
