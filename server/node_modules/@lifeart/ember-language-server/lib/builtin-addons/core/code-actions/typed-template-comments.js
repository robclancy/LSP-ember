"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const node_1 = require("vscode-languageserver/node");
const logger_1 = require("../../../utils/logger");
const estree_utils_1 = require("../../../estree-utils");
const template_lint_comments_1 = require("./template-lint-comments");
class TypedTemplatesCodeAction extends template_lint_comments_1.default {
    fixTypedTemplatesIssues(typedTemplateIssue, params, meta) {
        const fixes = typedTemplateIssue.map(() => {
            if (!meta.selection) {
                return null;
            }
            try {
                const result = this.commentCodeAction(meta, `@ts-ignore`);
                if (result === meta.selection) {
                    return null;
                }
                const edit = {
                    changes: {
                        [params.textDocument.uri]: [node_1.TextEdit.replace((0, estree_utils_1.toLSRange)(meta.location), result)],
                    },
                };
                return node_1.CodeAction.create(`disable: typed-templates`, edit, node_1.CodeActionKind.QuickFix);
            }
            catch (e) {
                (0, logger_1.logError)(e);
                return null;
            }
        });
        return fixes;
    }
    async onCodeAction(_, params) {
        const diagnostics = params.context.diagnostics;
        const typedTemplateIssue = diagnostics.filter((el) => el.source === 'typed-templates');
        if (typedTemplateIssue.length === 0) {
            return null;
        }
        try {
            const meta = this.metaForRange(params);
            if (!meta) {
                return null;
            }
            const fixedIssues = await this.fixTypedTemplatesIssues(typedTemplateIssue, params, meta);
            const codeActions = fixedIssues.filter((el) => el !== null);
            return codeActions;
        }
        catch (e) {
            return null;
        }
    }
}
exports.default = TypedTemplatesCodeAction;
//# sourceMappingURL=typed-template-comments.js.map